From 562a6197040c03402e7fb5fe0482142cf36a6a56 Mon Sep 17 00:00:00 2001
From: Felix Hammarstrand <felix.hammarstrand@flir.se>
Date: Mon, 13 May 2019 11:04:50 +0200
Subject: [PATCH] add cmd board and update_fdt_eeprom

copied from u-boot-pingu repo
adapted i2c function calls for new u-boot driver model
and eeprom structure for ec201 mainboard
---
 Makefile                           |   2 +
 flir/include/cmd_updatefdteeprom.h |  29 ++++++++++
 flir/include/eeprom.h              |  19 +++++++
 flir/src/Makefile                  |   4 ++
 flir/src/cmd_board.c               |  59 ++++++++++++++++++++
 flir/src/cmd_updatefdteeprom.c     | 107 +++++++++++++++++++++++++++++++++++++
 flir/src/eeprom.c                  |  56 +++++++++++++++++++
 7 files changed, 276 insertions(+)
 create mode 100644 flir/include/cmd_updatefdteeprom.h
 create mode 100644 flir/include/eeprom.h
 create mode 100644 flir/src/Makefile
 create mode 100644 flir/src/cmd_board.c
 create mode 100644 flir/src/cmd_updatefdteeprom.c
 create mode 100644 flir/src/eeprom.c

diff --git a/Makefile b/Makefile
index 225fa68..529be9e 100644
--- a/Makefile
+++ b/Makefile
@@ -627,6 +627,7 @@ KBUILD_CFLAGS += $(KCFLAGS)
 # Needed to be compatible with the O= option
 UBOOTINCLUDE    := \
 		-Iinclude \
+		-I$(srctree)/flir/include \
 		$(if $(KBUILD_SRC), -I$(srctree)/include) \
 		$(if $(CONFIG_$(SPL_)SYS_THUMB_BUILD), \
 			$(if $(CONFIG_HAS_THUMB2),, \
@@ -693,6 +694,7 @@ libs-y += drivers/usb/ulpi/
 libs-y += cmd/
 libs-y += common/
 libs-y += env/
+libs-y += flir/src/
 libs-$(CONFIG_API) += api/
 libs-$(CONFIG_HAS_POST) += post/
 libs-y += test/
diff --git a/flir/include/cmd_updatefdteeprom.h b/flir/include/cmd_updatefdteeprom.h
new file mode 100644
index 0000000..8dc9e87
--- /dev/null
+++ b/flir/include/cmd_updatefdteeprom.h
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2015 FLIR Systems.
+ *
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include "linux/list.h"
+#include <eeprom.h>
+
+#ifndef __CMD_UPDATEFDTEEPROM_H
+#define __CMD_UPDATEFDTEEPROM_H
+
+void patch_fdt_eeprom(void *blob);
+
+struct Eeprom_list{
+    struct list_head list;
+    struct Eeprom  eeprom;
+};
+
+#endif
diff --git a/flir/include/eeprom.h b/flir/include/eeprom.h
new file mode 100644
index 0000000..61c7c91
--- /dev/null
+++ b/flir/include/eeprom.h
@@ -0,0 +1,19 @@
+
+
+#ifndef __BOARD_H
+#define __BOARD_H
+
+struct Eeprom
+{
+	u8 i2c_bus;
+	u16 i2c_address;
+	u8 i2c_offset;
+	u32 article;
+	u32 revison;
+	char name[32];
+
+};
+
+int get_eeprom_hwrev(struct Eeprom * eeprom);
+
+#endif
diff --git a/flir/src/Makefile b/flir/src/Makefile
new file mode 100644
index 0000000..99fad23
--- /dev/null
+++ b/flir/src/Makefile
@@ -0,0 +1,4 @@
+obj-y	+= eeprom.o
+obj-y   += cmd_updatefdteeprom.o
+obj-y   += cmd_board.o
+
diff --git a/flir/src/cmd_board.c b/flir/src/cmd_board.c
new file mode 100644
index 0000000..d290070
--- /dev/null
+++ b/flir/src/cmd_board.c
@@ -0,0 +1,59 @@
+#include <common.h>
+#include <command.h>
+#include <errno.h>
+#include <malloc.h>
+#include <eeprom.h>
+
+
+#define Eeprom_entry(bus,address,i2c_offset,name) {bus,address,i2c_offset,0,0,name}
+
+struct Eeprom eeprom [] =
+{
+	Eeprom_entry(6,0xae,0x40,"main"),
+	Eeprom_entry(6,0xae,0x40,"ec201"),
+};
+static int do_board(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+	if (argc != 2)
+		return CMD_RET_USAGE;
+	int i,ret;
+
+	for(i=0;i<ARRAY_SIZE(eeprom);i++)
+		if(!strcmp(eeprom[i].name,argv[1]))
+			break;
+
+	if(i>=ARRAY_SIZE(eeprom))
+	{
+		printf("Board %s unsupported\n",argv[1]);
+		return CMD_RET_FAILURE;
+	}
+
+	ret = get_eeprom_hwrev(&eeprom[i]);
+	if(ret == 0)
+	{
+		char env[32];
+		char var[20];
+		sprintf(env, "%s_board_revision", eeprom[i].name);
+		sprintf(var, "%i", eeprom[i].revison);
+		env_set(env, var);
+		
+
+		sprintf(env, "%s_board_article", eeprom[i].name);
+		sprintf(var, "%i", eeprom[i].article);
+		env_set(env, var);
+		return CMD_RET_SUCCESS;
+	}
+	printf("Board %s not responding \n",eeprom[i].name);
+	return CMD_RET_FAILURE;
+}
+
+U_BOOT_CMD(
+	board, CONFIG_SYS_MAXARGS, 0, do_board,
+	"read rev and article from eeprom   ",
+	"<name>"
+	"\nWill read from eeprom <name> and fill in env variable\n"
+	"	<name>_board_revision and \n"
+	"	<name>_board_article\n"
+	"supported eeproms: \n"
+		"main, ec201"
+);
diff --git a/flir/src/cmd_updatefdteeprom.c b/flir/src/cmd_updatefdteeprom.c
new file mode 100644
index 0000000..240c72b
--- /dev/null
+++ b/flir/src/cmd_updatefdteeprom.c
@@ -0,0 +1,107 @@
+/*
+ * Copyright (C) 2015 FLIR Systems.
+ *
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+
+
+#include <common.h>
+#include <command.h>
+#include <errno.h>
+#include <i2c.h>
+#include <malloc.h>
+#include <cmd_updatefdteeprom.h>
+#include <fdt_support.h>
+#include <eeprom.h>
+
+/*
+* every computer boards contains an eeprom
+* describing the article and revision number of that board,
+* this is later passed to the kernel in a device tree
+*/
+
+
+struct Eeprom_list eeprom_list = {
+	.list		= LIST_HEAD_INIT(eeprom_list.list),
+};
+
+
+
+/*will patch a fdt blob with \
+ *  /boards/x/article
+ *  /boards/x/rev
+ *  entries
+*/
+
+void patch_fdt_eeprom(void *blob)
+{
+    struct Eeprom_list *tmp;
+
+    list_for_each_entry(tmp, &eeprom_list.list, list){
+        int article  = cpu_to_fdt32(tmp->eeprom.article);
+        int revision = cpu_to_fdt32(tmp->eeprom.revison);
+        do_fixup_by_path(blob,tmp->eeprom.name,"article",&article,sizeof(article),1);
+        do_fixup_by_path(blob,tmp->eeprom.name,"rev",&revision,sizeof(revision),1);
+    }
+
+}
+
+/*
+ * Prepares a list of HWrevstruct structures \
+ *     later used to update the fdt blob
+ * */
+
+static int do_update_fdt_eeprom(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+    if (argc != 5)
+        return CMD_RET_USAGE;
+
+    struct Eeprom_list * tmp = (struct Eeprom_list*) malloc(sizeof(struct Eeprom_list));
+    int ret=0;
+
+     /* I2C chip address */
+    tmp->eeprom.i2c_address  = simple_strtoul(argv[2], NULL, 16);
+
+     /* I2C data address within the chip. */
+    tmp->eeprom.i2c_offset = simple_strtoul(argv[3], NULL, 16);
+
+     /* I2C bus number */
+    tmp->eeprom.i2c_bus = simple_strtoul(argv[4], NULL, 16);
+
+     /* Device tree node name */
+    sprintf(tmp->eeprom.name,"/boards/%s",argv[1]);
+
+    ret=get_eeprom_hwrev(&tmp->eeprom);
+
+    if(ret==0)
+    {
+        list_add(&tmp->list,&eeprom_list.list);
+        return CMD_RET_SUCCESS;
+    }
+    printf("Failed to read %s version \n",tmp->eeprom.name);
+
+    cfree(tmp);
+    return CMD_RET_FAILURE;
+}
+
+U_BOOT_CMD(
+	update_fdt_eeprom, CONFIG_SYS_MAXARGS, 0, do_update_fdt_eeprom,
+	"update_fdt_eeprom  <name> <address> <offset> <i2c>  ",
+    "update_fdt_eeprom  <name> <address> <offset> <i2c>  \n"
+	"update_fdt_eeprom  mainboard 0xae 0x40 3 will create an fdt node:\n"
+" /boards{      \n "
+"           mainboard {\n"
+"           article=198752\n"
+"           rev =1\n"
+"           }\n"
+);
diff --git a/flir/src/eeprom.c b/flir/src/eeprom.c
new file mode 100644
index 0000000..b7257af
--- /dev/null
+++ b/flir/src/eeprom.c
@@ -0,0 +1,56 @@
+
+#include <common.h>
+#include <command.h>
+#include <errno.h>
+#include <malloc.h>
+#include <eeprom.h>
+#include <i2c.h>
+
+/** Hardware version struct (in EEPROM) */
+struct HWrevstruct
+{
+    char article[10];
+    char serial[10];
+    char revision[4];
+    char moduleOffset[2];   /**< Address of a parent module, ModRevstruct */
+    char moduleDevice[2];   /**< i2c device */
+    char reserved[2];
+};    /**< 32 bytes including checksum */
+
+/*
+reads from i2c bus
+expects a structure HWrevstruct
+at i2c_offset
+returns
+article and rev
+*/
+int get_eeprom_hwrev(struct Eeprom * eeprom)
+{
+
+    int ret = 0;
+    struct HWrevstruct hwrev;
+    int chip = (eeprom->i2c_address)>>1;
+    int addr = eeprom->i2c_offset;
+
+#if CONFIG_DM_I2C
+    struct udevice *dev;
+    struct udevice *bus;
+    ret = uclass_get_device_by_seq(UCLASS_I2C, eeprom->i2c_bus, &bus);
+    if (!ret)
+        ret = i2c_get_chip(bus, chip, 1, &dev);
+    if (!ret)
+        ret = dm_i2c_read(dev, addr, (uchar *)&hwrev, sizeof(hwrev));
+#else
+    ret = i2c_set_bus_num(eeprom->i2c_bus);
+    ret = i2c_read(chip, addr, 1, (uchar*)&hwrev, sizeof(hwrev));
+#endif
+
+    
+
+    if(ret==0)
+    {
+        eeprom->article = simple_strtoul((char *)&hwrev.article[1], NULL, 10);
+        eeprom->revison = simple_strtoul(hwrev.revision, NULL, 10);
+    }
+    return ret;
+}
