From cdb373b830830fc40b9b4438e5c51e68cd0f7a51 Mon Sep 17 00:00:00 2001
From: Felix Hammarstrand <felix.hammarstrand@flir.se>
Date: Thu, 14 Nov 2019 11:06:12 +0100
Subject: [PATCH] add boot state functionalty

will boot to charge state, normal boot, low battery state
depending on what event woke the camera
Events are button event, reset, usb cable attach
---
 board/flir/ec201/bootstate.c   | 327 +++++++++++++++++++++++++++++++++++++++++
 board/flir/ec201/bootstate.h   |  18 +++
 configs/mx7ulp_ec201_defconfig |   3 +
 include/configs/ec201.h        |   3 +
 4 files changed, 351 insertions(+)
 create mode 100644 board/flir/ec201/bootstate.c
 create mode 100644 board/flir/ec201/bootstate.h

diff --git a/board/flir/ec201/bootstate.c b/board/flir/ec201/bootstate.c
new file mode 100644
index 0000000..1233553
--- /dev/null
+++ b/board/flir/ec201/bootstate.c
@@ -0,0 +1,327 @@
+
+/*
+ * Copyright (C) 2019 FLIR Systems.
+ *
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+
+
+
+#include <common.h>
+#include <asm/io.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/arch/mx7ulp-pins.h>
+#include <asm/arch/iomux.h>
+#include <asm/gpio.h>
+#include <dm.h>
+#include <i2c.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+
+enum WAKE_EVENTS
+{
+	USB_CABLE = 0,
+	VBUS_POWER,
+	ONKEY,
+	RESET,
+	ONKEY_LONG_PRESS,
+	INVALID_EVENT,
+};
+
+enum BOOT_STATES
+{
+	INVALID_STATE = 0,
+	NORMAL_BOOT = 1,
+	LOW_BATTERY = 2,
+	NO_BATTERY = 3,
+	USB_CHARGE = 4,
+	NUM_BOOT_STATES = 5,
+};
+
+static struct boot_state
+{
+	u8 wake_event;
+	u8 boot_state;
+	u8 force_boot_state;
+	u16 battery_mV;
+	bool battery;
+	bool usb_cable;
+
+}state = {
+	.wake_event = ONKEY,
+	.boot_state = NORMAL_BOOT,
+	.force_boot_state = 0,
+	.battery_mV = 4000,
+	.usb_cable = false,
+	.battery = false,
+};
+
+#define LOW_BATTERY_mV 3300
+
+//Pmic registers defines
+#define ONKEY_INT_STAT0 0x24
+#define CHG_INT		0x80
+#define CHG_INT_OK	0x84
+#define CHG_SNS	0x86
+#define MISC_INT_STAT0 0x28
+#define PWRCTRL3 0x5b
+//Special register in pmic which we can use to force boot state between reboots
+#define FORCE_BOOT_STATE 0x9C
+#define PWRCTRL3_GOTO_CORE_OFF (1<<1)
+#define CHG_INT_OK_VBUS_OK (1<<5)
+#define CHG_INT_VBUS_I (1<<5)
+
+
+#define PMIC_WDOG_GPIO	IMX_GPIO_NR(1, 14)
+
+static iomux_cfg_t const pmic_wdog_pad[] = {
+	MX7ULP_PAD_PTA14__PTA14 | MUX_PAD_CTRL(NO_PAD_CTRL),
+};
+
+
+void pmic_goto_core_off(bool enable)
+{
+	struct udevice *dev;
+	u8 buf = enable?2:0;
+	//set go to core off mode
+	i2c_get_chip_for_busnum(5, 0x8, 1, &dev);
+
+	dm_i2c_write(dev, PWRCTRL3, &buf, 1);
+}
+
+
+void power_off(void)
+{	
+	printf("Powering off....\n");
+	//set go to core off mode
+	pmic_goto_core_off(true);
+	//set watchdog signal low
+	gpio_direction_output(PMIC_WDOG_GPIO, 0);
+
+	while(1)
+	{
+	}
+}
+
+void reboot(void)
+{	
+	printf("Reboot....\n");
+	//set go to core off mode
+	pmic_goto_core_off(false);
+	//set watchdog signal low
+	gpio_direction_output(PMIC_WDOG_GPIO, 0);
+
+	while(1)
+	{
+	}
+}
+
+
+
+static int get_wake_event(void)
+{
+
+	u8 chg_int, chg_int_ok, pwrctrl3;
+	u8 force_boot_state,buf;
+	struct udevice *dev;
+	int ret;
+
+	ret = i2c_get_chip_for_busnum(5, 0x8, 1, &dev);
+	if (ret) {
+		printf("Can not find pmic: %d\n", ret);
+		return ret;
+	}
+
+	dm_i2c_read(dev, CHG_INT, &chg_int, 1);
+	dm_i2c_write(dev, CHG_INT, &chg_int, 1);
+	dm_i2c_read(dev, CHG_INT_OK, &chg_int_ok, 1);
+	dm_i2c_read(dev, PWRCTRL3, &pwrctrl3, 1);
+	//read hidden state registers
+	dm_i2c_read(dev, FORCE_BOOT_STATE, &force_boot_state, 1);
+	buf = 0;
+	dm_i2c_write(dev, FORCE_BOOT_STATE, &buf, 1);
+	printf("pmic chg_int=0x%x chg_int_ok=0x%x  pwrctrl3=0x%x force_boot_state=0x%x\n",chg_int,chg_int_ok,pwrctrl3,force_boot_state );
+
+
+	//We have no way to detect onoff button events from poweroff or reboot.
+	//We use this as the default event
+	state.wake_event = RESET;
+
+	//usb cable already attached
+	if(chg_int_ok & CHG_INT_OK_VBUS_OK )
+		state.usb_cable = true;
+
+	//usb cable is inserted
+	if(chg_int & CHG_INT_VBUS_I )
+		state.wake_event = USB_CABLE;
+	
+	if(force_boot_state < NUM_BOOT_STATES)
+		state.force_boot_state = force_boot_state;
+
+	return 0;
+}
+
+
+int get_battery_voltage(int *voltage)
+{
+	//Read battery voltage
+	struct udevice *dev;
+	u8 buf[4];
+	int ret;
+
+	ret = i2c_get_chip_for_busnum(5, 0xb, 1, &dev);
+	if (ret) {
+		printf("Can not find fuelgauge LC 709203: %d\n", ret);
+		return ret;
+	}
+	
+	ret = dm_i2c_read(dev, 0x9, buf, 2);
+	if(!ret)
+		*voltage = *(u16*)buf;
+
+	return ret;
+
+}
+
+int get_battery_state_of_charge(int *soc)
+{
+	struct udevice *dev;
+	u8 buf[4];
+	int ret;
+
+	ret = i2c_get_chip_for_busnum(5, 0xb, 1, &dev);
+	if (ret) {
+		printf("Can not find fuelgauge LC 709203: %d\n", ret);
+		return ret;
+	}
+	
+	ret = dm_i2c_read(dev, 0xd, buf, 2);
+	if(!ret)
+		*soc = *(u16*)buf;
+
+	return ret;
+}
+
+
+void set_boot_logo(void)
+{
+
+	switch(state.boot_state)
+	{
+	case NO_BATTERY:
+	case LOW_BATTERY:
+		env_set("splashfile","/boot/no_battery.bmp.gz");
+		break;
+
+	case USB_CHARGE:
+		env_set("splashfile","/boot/battery_logo.bmp.gz");
+		break;
+	case NORMAL_BOOT:
+		break;
+
+	}
+
+}
+
+int boot_state_init(void)
+{
+
+	get_battery_voltage(&state.battery_mV);
+	printf("Battery voltage mV=%d\n",state.battery_mV);
+	get_wake_event();
+
+	mx7ulp_iomux_setup_multiple_pads(pmic_wdog_pad, ARRAY_SIZE(pmic_wdog_pad));
+	gpio_request(PMIC_WDOG_GPIO, "pmic_wdog");
+	
+	if(state.force_boot_state )
+	{
+		printf("Force Boot State to %d \n",state.force_boot_state);
+		state.boot_state = state.force_boot_state;
+		return 0;
+	}
+	
+	switch(state.wake_event)
+	{
+	case USB_CABLE:
+		state.boot_state = USB_CHARGE;
+		break;
+	case RESET:
+	case ONKEY:
+		if(state.battery_mV  < LOW_BATTERY_mV)
+			state.boot_state = LOW_BATTERY;
+		else
+			state.boot_state = NORMAL_BOOT;
+		break;
+	case INVALID_EVENT:
+		printf("Invalid boot event: INVALID_EVENT \n");
+		power_off();
+		break;
+
+	}
+	return 0;
+}
+
+
+
+
+static int do_boot_state(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+
+	if(argc == 2)
+	{
+		state.boot_state = simple_strtoul(argv[1], NULL, 16);
+		printf("Custom boot state=%d \n",state.boot_state);
+	}
+
+	switch(state.boot_state)
+	{
+
+	case NORMAL_BOOT:
+		break;
+
+	case NO_BATTERY:
+		printf("Battery missing\n");
+		power_off();
+		break;
+
+	case LOW_BATTERY:
+		printf("Battery low power\n");
+		power_off();
+		break;
+
+	case USB_CHARGE:
+		printf("Camera: charge state \n");
+		run_command("chargeapp",0);
+
+		break;
+
+	default:
+		printf("Invalid boot state \n");
+		break;
+	}
+
+	return 0;
+
+}
+
+U_BOOT_CMD(
+    bootstate,	2,	0,	do_boot_state,
+    "Process boot state, might power off camera",
+	" {state} \n"
+	"1 - Normal state		-> boot camera into run state\n"
+    "2 - Low battery state		-> power off camera\n"
+	"3 - No battery			-> power off camera\n"
+	"4 - Charge battery		-> boot camera into charge state\n"
+);
+
diff --git a/board/flir/ec201/bootstate.h b/board/flir/ec201/bootstate.h
new file mode 100644
index 0000000..49e3535
--- /dev/null
+++ b/board/flir/ec201/bootstate.h
@@ -0,0 +1,18 @@
+
+#ifndef _BOOTSTATE_H
+#define _BOOTSTATE_H
+
+void set_boot_logo(void);
+
+int boot_state_init(void);
+
+int get_battery_state_of_charge(int *soc);
+
+void power_off();
+
+void reboot(void);
+
+void pmic_goto_core_off(bool enable);
+
+
+#endif
\ No newline at end of file
diff --git a/configs/mx7ulp_ec201_defconfig b/configs/mx7ulp_ec201_defconfig
index a71a553..e62e1a7 100644
--- a/configs/mx7ulp_ec201_defconfig
+++ b/configs/mx7ulp_ec201_defconfig
@@ -72,3 +72,6 @@ CONFIG_CMD_GPT=y
 CONFIG_EFI_PARTITION=y
 CONFIG_AUTOBOOT=y
 CONFIG_BOOTDELAY=0
+
+CONFIG_AUTO_COMPLETE=y
+CONFIG_CMDLINE_EDITING=y
\ No newline at end of file
diff --git a/include/configs/ec201.h b/include/configs/ec201.h
index 6ae961d..940e5a0 100644
--- a/include/configs/ec201.h
+++ b/include/configs/ec201.h
@@ -87,6 +87,7 @@
 
 #define CONFIG_SYS_HZ			1000
 #define CONFIG_SYS_LOAD_ADDR		CONFIG_LOADADDR
+#define CONFIG_STANDALONE_LOAD_ADDR  CONFIG_SYS_LOAD_ADDR
 
 #define CONFIG_SYS_INIT_RAM_ADDR	IRAM_BASE_ADDR
 #define CONFIG_SYS_INIT_RAM_SIZE	SZ_256K
@@ -116,6 +117,7 @@
 #define CONFIG_VIDEO_BMP_GZIP
 #define CONFIG_SYS_VIDEO_LOGO_MAX_SIZE 1024*1024
 #endif
+#define CONFIG_CFB_CONSOLE_ANSI
 #define CONFIG_OF_BOARD_SETUP
 
 /* Override imx standard behavior when loading u-boot from usb */
@@ -334,6 +336,7 @@
 			"run select_boot;\0" \
 \
 	"mmcbootflir=echo Booting from mmc (flir)...;" \
+			"bootstate;" \
 			"run setup_boot;run update-fdt; run selectfdtfile; " \
 			"run hw_start;" \
 			"run mmcargs;" \
