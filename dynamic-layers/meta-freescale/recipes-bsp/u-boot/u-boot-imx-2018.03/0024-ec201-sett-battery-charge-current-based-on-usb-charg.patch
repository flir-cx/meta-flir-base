From dfa7020d6371d23bec87599789344654c01f4f7d Mon Sep 17 00:00:00 2001
From: Felix Hammarstrand <felix.hammarstrand@flir.se>
Date: Fri, 10 Jan 2020 10:41:57 +0100
Subject: [PATCH] ec201: sett battery charge current based on usb charger
 detection

new  pf1550 pmic driver
 - moved pmic functionalty from chargestate to pmic driver (power off, reboot)
 - set usb charge current
 - moved pmic functionality from chargeapp to pmic driver (get usb cable state, get onoff button)
---
 board/flir/ec201/Makefile    |   3 +-
 board/flir/ec201/bootstate.c |  77 ++----------
 board/flir/ec201/bootstate.h |   7 --
 board/flir/ec201/chargeapp.c |  51 +-------
 board/flir/ec201/ec201.c     | 105 +++++++++++++++-
 board/flir/ec201/pf1550.c    | 149 +++++++++++++++++++++++
 board/flir/ec201/pf1550.h    | 277 +++++++++++++++++++++++++++++++++++++++++++
 7 files changed, 542 insertions(+), 127 deletions(-)
 create mode 100644 board/flir/ec201/pf1550.c
 create mode 100644 board/flir/ec201/pf1550.h

diff --git a/board/flir/ec201/Makefile b/board/flir/ec201/Makefile
index 1944133..3a4daf1 100644
--- a/board/flir/ec201/Makefile
+++ b/board/flir/ec201/Makefile
@@ -8,4 +8,5 @@
 
 obj-y  += ec201.o
 obj-y  += bootstate.o
-obj-y  += chargeapp.o
\ No newline at end of file
+obj-y  += chargeapp.o
+obj-y  += pf1550.o
diff --git a/board/flir/ec201/bootstate.c b/board/flir/ec201/bootstate.c
index 1233553..f64bf7f 100644
--- a/board/flir/ec201/bootstate.c
+++ b/board/flir/ec201/bootstate.c
@@ -20,11 +20,9 @@
 #include <common.h>
 #include <asm/io.h>
 #include <asm/arch/sys_proto.h>
-#include <asm/arch/mx7ulp-pins.h>
-#include <asm/arch/iomux.h>
-#include <asm/gpio.h>
 #include <dm.h>
 #include <i2c.h>
+#include <pf1550.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -70,63 +68,8 @@ static struct boot_state
 #define LOW_BATTERY_mV 3300
 
 //Pmic registers defines
-#define ONKEY_INT_STAT0 0x24
-#define CHG_INT		0x80
-#define CHG_INT_OK	0x84
-#define CHG_SNS	0x86
-#define MISC_INT_STAT0 0x28
-#define PWRCTRL3 0x5b
 //Special register in pmic which we can use to force boot state between reboots
-#define FORCE_BOOT_STATE 0x9C
-#define PWRCTRL3_GOTO_CORE_OFF (1<<1)
-#define CHG_INT_OK_VBUS_OK (1<<5)
-#define CHG_INT_VBUS_I (1<<5)
-
-
-#define PMIC_WDOG_GPIO	IMX_GPIO_NR(1, 14)
-
-static iomux_cfg_t const pmic_wdog_pad[] = {
-	MX7ULP_PAD_PTA14__PTA14 | MUX_PAD_CTRL(NO_PAD_CTRL),
-};
-
-
-void pmic_goto_core_off(bool enable)
-{
-	struct udevice *dev;
-	u8 buf = enable?2:0;
-	//set go to core off mode
-	i2c_get_chip_for_busnum(5, 0x8, 1, &dev);
-
-	dm_i2c_write(dev, PWRCTRL3, &buf, 1);
-}
-
-
-void power_off(void)
-{	
-	printf("Powering off....\n");
-	//set go to core off mode
-	pmic_goto_core_off(true);
-	//set watchdog signal low
-	gpio_direction_output(PMIC_WDOG_GPIO, 0);
-
-	while(1)
-	{
-	}
-}
-
-void reboot(void)
-{	
-	printf("Reboot....\n");
-	//set go to core off mode
-	pmic_goto_core_off(false);
-	//set watchdog signal low
-	gpio_direction_output(PMIC_WDOG_GPIO, 0);
-
-	while(1)
-	{
-	}
-}
-
+#define FORCE_BOOT_STATE PF1550_CHARG_REG_LED_PWM
 
 
 static int get_wake_event(void)
@@ -143,10 +86,10 @@ static int get_wake_event(void)
 		return ret;
 	}
 
-	dm_i2c_read(dev, CHG_INT, &chg_int, 1);
-	dm_i2c_write(dev, CHG_INT, &chg_int, 1);
-	dm_i2c_read(dev, CHG_INT_OK, &chg_int_ok, 1);
-	dm_i2c_read(dev, PWRCTRL3, &pwrctrl3, 1);
+	dm_i2c_read(dev, PF1550_CHARG_REG_CHG_INT, &chg_int, 1);
+	dm_i2c_write(dev, PF1550_CHARG_REG_CHG_INT, &chg_int, 1);
+	dm_i2c_read(dev, PF1550_CHARG_REG_CHG_INT_OK, &chg_int_ok, 1);
+	dm_i2c_read(dev, PF1550_PMIC_REG_PWRCTRL3, &pwrctrl3, 1);
 	//read hidden state registers
 	dm_i2c_read(dev, FORCE_BOOT_STATE, &force_boot_state, 1);
 	buf = 0;
@@ -159,11 +102,11 @@ static int get_wake_event(void)
 	state.wake_event = RESET;
 
 	//usb cable already attached
-	if(chg_int_ok & CHG_INT_OK_VBUS_OK )
+	if(chg_int_ok & PF1550_CHG_INT_OK_VBUS_OK )
 		state.usb_cable = true;
 
 	//usb cable is inserted
-	if(chg_int & CHG_INT_VBUS_I )
+	if(chg_int & CHARG_IRQ_VBUSI )
 		state.wake_event = USB_CABLE;
 	
 	if(force_boot_state < NUM_BOOT_STATES)
@@ -241,9 +184,7 @@ int boot_state_init(void)
 	printf("Battery voltage mV=%d\n",state.battery_mV);
 	get_wake_event();
 
-	mx7ulp_iomux_setup_multiple_pads(pmic_wdog_pad, ARRAY_SIZE(pmic_wdog_pad));
-	gpio_request(PMIC_WDOG_GPIO, "pmic_wdog");
-	
+
 	if(state.force_boot_state )
 	{
 		printf("Force Boot State to %d \n",state.force_boot_state);
diff --git a/board/flir/ec201/bootstate.h b/board/flir/ec201/bootstate.h
index 49e3535..b0286c2 100644
--- a/board/flir/ec201/bootstate.h
+++ b/board/flir/ec201/bootstate.h
@@ -8,11 +8,4 @@ int boot_state_init(void);
 
 int get_battery_state_of_charge(int *soc);
 
-void power_off();
-
-void reboot(void);
-
-void pmic_goto_core_off(bool enable);
-
-
 #endif
\ No newline at end of file
diff --git a/board/flir/ec201/chargeapp.c b/board/flir/ec201/chargeapp.c
index 27a94a4..62add5d 100644
--- a/board/flir/ec201/chargeapp.c
+++ b/board/flir/ec201/chargeapp.c
@@ -7,12 +7,12 @@
 #include <asm/arch/iomux.h>
 #include <asm/gpio.h>
 #include <dm.h>
-
+#include <bootstate.h>
 #include <console.h>
 #include <command.h>
 #include <stdio_dev.h>
 #include <video.h>
-#include <i2c.h>
+#include <pf1550.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -28,13 +28,6 @@ DECLARE_GLOBAL_DATA_PTR;
 #define COLOR_RED 		0xe93b3b
 #define DISPLAY_TIMEOUT 20
 
-//Pmic 
-#define CHG_INT_OK_VBUS_OK (1<<5)
-#define CHG_INT_OK	0x84
-
-#define ONKEY_INT 0x24
-#define ONKEY_PUSHI (1<<0)
-
 //Enums
 enum {
 	DISPLAY_ON,
@@ -106,47 +99,7 @@ void do_charge_update(int level)
 }
 
 
-int get_onoff_key(void)
-{
-	u8 onkey_int,ret;
-	struct udevice *dev;
-
-	ret = i2c_get_chip_for_busnum(5, 0x8, 1, &dev);
-	if (ret) {
-		printf("Can not find pmic: %d\n", ret);
-		return 0;
-	}
-
-	dm_i2c_read(dev, ONKEY_INT, &onkey_int, 1);
-	dm_i2c_write(dev, ONKEY_INT, &onkey_int, 1);
-
-	if(onkey_int &  ONKEY_PUSHI)
-		return 1;
-
-	return 0;
-
-}
-
-
-
-int get_usb_cable_state(void)
-{
-	u8 chg_int_ok,ret;
-	struct udevice *dev;
-
-	ret = i2c_get_chip_for_busnum(5, 0x8, 1, &dev);
-	if (ret) {
-		printf("Can not find pmic: %d\n", ret);
-		return 0;
-	}
-
-	dm_i2c_read(dev, CHG_INT_OK, &chg_int_ok, 1);
-
-	if(chg_int_ok & CHG_INT_OK_VBUS_OK )
-		return 1;
 
-	return 0;
-}
 
 void turn_on_display(void)
 {
diff --git a/board/flir/ec201/ec201.c b/board/flir/ec201/ec201.c
index 594b402..276f602 100644
--- a/board/flir/ec201/ec201.c
+++ b/board/flir/ec201/ec201.c
@@ -12,6 +12,7 @@
 #include <asm/arch/mx7ulp-pins.h>
 #include <asm/arch/iomux.h>
 #include <asm/gpio.h>
+#include <fdt_support.h>
 #include <usb.h>
 #include <dm.h>
 #include <asm/mach-imx/video.h>
@@ -22,6 +23,7 @@
 #include <mxsfb.h>
 #include <i2c.h>
 #include <bootstate.h>
+#include <pf1550.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -29,6 +31,38 @@ DECLARE_GLOBAL_DATA_PTR;
 #define SNVS_LPCR_BTN_PRESS_TIME_DISABLE	(0x3<<16)
 #define SNVS_LP_LPCR	(0x41070038)
 
+#define USB_DCD					(USB_PHY0_BASE_ADDR + 0x800)
+#define USB_DCD_CONTROL			(USB_DCD + 0x0)
+#define USB_DCD_CONTROL_SR		(1<<25)
+#define USB_DCD_CONTROL_START	(1<<24)
+#define USB_DCD_CONTROL_BC12	(1<<17)
+#define USB_DCD_CONTROL_IE		(1<<16)
+#define USB_DCD_STATUS			(USB_DCD + 0x8)
+#define USB_DCD_STATUS_ACTIVE	(1<<22)
+#define USB_DCD_STATUS_TO		(1<<21)
+#define USB_DCD_STATUS_ERR		(1<<20)
+#define USB_DCD_STATUS_SEQ_STAT_SHIFT	(18)
+#define USB_DCD_STATUS_SEQ_RES_SHIFT	(16)
+#define USB_DCD_SIGNAL_OVERRIDE			(USB_DCD + 0xC)
+#define USB_DCD_SIGNAL_OVERRIDE_PS_VDP_SRC 0x2
+
+enum {
+	STAT_DISABLED=0,
+	STAT_DATA_PIN=1,
+	STAT_CHARGING=2,
+	STAT_CHARGER_TYPE=3,
+};
+enum {
+	SEQ_NO_RESULT=0,
+	SEQ_SDP=1,
+	SEQ_CDP_DCP=2,
+	SEQ_DCP=3,
+};
+#define USB_DCD_STATUS_SEQ_RES_SHIFT	(16)
+
+
+void hx8394_init(void);
+
 int dram_init(void)
 {
 	gd->ram_size = PHYS_SDRAM_SIZE;
@@ -65,7 +99,7 @@ int board_ehci_usb_phy_mode(struct udevice *dev)
 #define THERMISTOR_MODE 0x1
 #define OPERATIONAL_MODE 0x1
 
-int fuelgauge_init()
+int fuelgauge_init(void)
 {
 	struct udevice *dev;
 	u8 buf[4];
@@ -107,6 +141,72 @@ int fuelgauge_init()
 
 
 
+
+
+int usb_charge_detect(void)
+{
+	u32	dcd_status;
+	int charge_current_mA;
+	int timeout = 1000;
+
+	//check for usb cable
+	if(!get_usb_cable_state())
+		return 0;
+
+	//reset 
+	writel((readl(USB_DCD_CONTROL) | USB_DCD_CONTROL_SR), USB_DCD_CONTROL);
+	//use bc1.2 standard
+	writel((readl(USB_DCD_CONTROL) | USB_DCD_CONTROL_BC12), USB_DCD_CONTROL);
+	//disable interrupts
+	writel((readl(USB_DCD_CONTROL) & ~USB_DCD_CONTROL_IE), USB_DCD_CONTROL);
+	//Enables VDP_SRC voltage source for the USB_DP pin and IDM_SINK current source for the USB_DM pin
+	writel((readl(USB_DCD_SIGNAL_OVERRIDE) | USB_DCD_SIGNAL_OVERRIDE_PS_VDP_SRC), USB_DCD_SIGNAL_OVERRIDE);
+	//start charger detection
+	writel((readl(USB_DCD_CONTROL) | USB_DCD_CONTROL_START), USB_DCD_CONTROL);
+
+	while(timeout--)
+	{
+		dcd_status = readl(USB_DCD_STATUS);
+
+		if(dcd_status & USB_DCD_STATUS_ERR)
+		{
+			printf("usb dcd error, dcd_status %x\n",dcd_status);
+			return -1;
+		}
+		if(dcd_status & USB_DCD_STATUS_TO)
+		{
+			printf("usb dcd timeout, dcd_status %x\n",dcd_status);
+			return -1;
+		}
+
+		if(!(dcd_status & USB_DCD_STATUS_ACTIVE))
+			break;
+		mdelay(1);
+	}
+
+	u8 seq_res = (dcd_status >> USB_DCD_STATUS_SEQ_RES_SHIFT) & 0x3;
+	switch(seq_res)
+	{
+	case SEQ_SDP:
+		charge_current_mA = 500;
+		break;
+	case SEQ_CDP_DCP:
+	case SEQ_DCP:
+		charge_current_mA = 1500;
+		break;
+
+	default:
+	case SEQ_NO_RESULT:
+		charge_current_mA = 100;
+		break;
+	}
+	set_charging_current(charge_current_mA);
+
+	printf("USB DCD: Setting charge current to %d, seq_res %d \n",charge_current_mA, seq_res);
+	return 0;
+}
+
+
 int board_early_init_f(void)
 {
 	setup_iomux_uart();
@@ -123,8 +223,9 @@ int board_init(void)
 #ifdef CONFIG_DM_USB
 	setup_usb();
 #endif
-
+	init_pf1550_pmic();
 	fuelgauge_init();
+	usb_charge_detect();
 	boot_state_init();
 
 	//Let onoff button long press poweroff the camera
diff --git a/board/flir/ec201/pf1550.c b/board/flir/ec201/pf1550.c
new file mode 100644
index 0000000..9f912d5
--- /dev/null
+++ b/board/flir/ec201/pf1550.c
@@ -0,0 +1,149 @@
+/*
+ * Copyright 2018 FLIR
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <i2c.h>
+#include <asm/arch/mx7ulp-pins.h>
+#include <asm/arch/iomux.h>
+#include <asm/gpio.h>
+#include "pf1550.h"
+
+
+
+#define PMIC_WDOG_GPIO	IMX_GPIO_NR(1, 14)
+
+static iomux_cfg_t const pmic_wdog_pad[] = {
+	MX7ULP_PAD_PTA14__PTA14 | MUX_PAD_CTRL(NO_PAD_CTRL),
+};
+
+
+
+int pf1550_write_reg(int reg, u8 val)
+{
+	struct udevice *dev;
+	int ret = i2c_get_chip_for_busnum(5, 0x8, 1, &dev);
+	if (ret) {
+		printf("Can not find pmic: %d\n", ret);
+		return ret;
+	}
+	return dm_i2c_write(dev, reg, &val, 1);
+}
+
+
+int pf1550_read_reg(int reg, u8* val)
+{
+	struct udevice *dev;
+	int ret = i2c_get_chip_for_busnum(5, 0x8, 1, &dev);
+	if (ret) {
+		printf("Can not find pmic: %d\n", ret);
+		return ret;
+	}
+	return dm_i2c_read(dev, reg, val, 1);
+}
+
+
+int get_usb_cable_state(void)
+{
+	u8 chg_int_ok=0;
+	pf1550_read_reg(PF1550_CHARG_REG_VBUS_SNS ,&chg_int_ok);
+
+	if(chg_int_ok & PF1550_VBUS_VALID )
+		return 1;
+
+	return 0;
+}
+
+
+int get_onoff_key(void)
+{
+	u8 onkey_int=0;
+	pf1550_read_reg(PF1550_PMIC_REG_ONKEY_INT_STAT0 ,&onkey_int);
+	pf1550_write_reg(PF1550_PMIC_REG_ONKEY_INT_STAT0, onkey_int);
+
+	if(onkey_int &  ONKEY_IRQ_PUSHI)
+		return 1;
+	return 0;
+}
+
+
+void pmic_goto_core_off(bool enable)
+{
+	struct udevice *dev;
+	u8 buf = enable?2:0;
+	//set go to core off mode
+	pf1550_write_reg(PF1550_PMIC_REG_PWRCTRL3, buf);
+}
+
+
+void power_off(void)
+{
+	printf("Powering off....\n");
+	//set go to core off mode
+	pmic_goto_core_off(true);
+	//set watchdog signal low
+	gpio_direction_output(PMIC_WDOG_GPIO, 0);
+
+	while(1)
+	{
+	}
+}
+
+void reboot(void)
+{
+	printf("Reboot....\n");
+	//set go to core off mode
+	pmic_goto_core_off(false);
+	//set watchdog signal low
+	gpio_direction_output(PMIC_WDOG_GPIO, 0);
+
+	while(1)
+	{
+	}
+}
+
+
+
+
+void init_pf1550_pmic(void)
+{
+	//set Carger operation to charger=off, linear=on
+	pf1550_write_reg(PF1550_CHARG_REG_CHG_OPER, 0x1);
+	//set THM_CNFG=JEITA2 REGTEMP=95C THM_COLD=0C THM_HOT=55C TMP_FB_EN=1
+	pf1550_write_reg(PF1550_CHARG_REG_THM_REG_CNFG, 0xa7);
+	//set JEITA THM_WARM=45C THM_COOL=10C CV_ADJ=60mV CC_ADJ=100%
+	pf1550_write_reg(PF1550_CHARG_REG_THM_ADJ_SETTING, 0x32);
+	//set charger current to 1A PRECHGLB_THRS=2.8V
+	pf1550_write_reg(PF1550_CHARG_REG_CHG_CURR_CNFG, 0x12);
+
+	mx7ulp_iomux_setup_multiple_pads(pmic_wdog_pad, ARRAY_SIZE(pmic_wdog_pad));
+	gpio_request(PMIC_WDOG_GPIO, "pmic_wdog");
+}
+
+
+
+void set_charging_current(int mA)
+{
+	u8 ilim = _10ma << VBUS_LIN_ILIM_SHIFT;
+
+	if(mA >= 1500)
+		ilim = _1500ma << VBUS_LIN_ILIM_SHIFT;
+	else if(mA >= 1000)
+		ilim = _1000ma << VBUS_LIN_ILIM_SHIFT;
+	else if(mA >= 500)
+		ilim = _500ma  << VBUS_LIN_ILIM_SHIFT;
+	else if(mA >= 100)
+		ilim = _100ma << VBUS_LIN_ILIM_SHIFT;
+	else 
+		ilim = _10ma << VBUS_LIN_ILIM_SHIFT;
+
+	pf1550_write_reg(PF1550_CHARG_REG_VBUS_INLIM_CNFG, ilim);
+	//set Carger operation to charger=on, linear=on
+	pf1550_write_reg(PF1550_CHARG_REG_CHG_OPER, 0x2);
+}
+
diff --git a/board/flir/ec201/pf1550.h b/board/flir/ec201/pf1550.h
new file mode 100644
index 0000000..ed0165b
--- /dev/null
+++ b/board/flir/ec201/pf1550.h
@@ -0,0 +1,277 @@
+/*
+ * pf1550.h - mfd head file for PF1550
+ *
+ * Copyright (C) 2016 Freescale Semiconductor, Inc.
+ * Robin Gong <yibin.gong@freescale.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __LINUX_MFD_PF1550_H
+#define __LINUX_MFD_PF1550_H
+
+
+enum pf1550_pmic_reg {
+	/* PMIC regulator part */
+	PF1550_PMIC_REG_DEVICE_ID		= 0x00,
+	PF1550_PMIC_REG_OTP_FLAVOR		= 0x01,
+	PF1550_PMIC_REG_SILICON_REV		= 0x02,
+
+	PF1550_PMIC_REG_INT_CATEGORY		= 0x06,
+	PF1550_PMIC_REG_SW_INT_STAT0		= 0x08,
+	PF1550_PMIC_REG_SW_INT_MASK0		= 0x09,
+	PF1550_PMIC_REG_SW_INT_SENSE0		= 0x0A,
+	PF1550_PMIC_REG_SW_INT_STAT1		= 0x0B,
+	PF1550_PMIC_REG_SW_INT_MASK1		= 0x0C,
+	PF1550_PMIC_REG_SW_INT_SENSE1		= 0x0D,
+	PF1550_PMIC_REG_SW_INT_STAT2		= 0x0E,
+	PF1550_PMIC_REG_SW_INT_MASK2		= 0x0F,
+	PF1550_PMIC_REG_SW_INT_SENSE2		= 0x10,
+	PF1550_PMIC_REG_LDO_INT_STAT0		= 0x18,
+	PF1550_PMIC_REG_LDO_INT_MASK0		= 0x19,
+	PF1550_PMIC_REG_LDO_INT_SENSE0		= 0x1A,
+	PF1550_PMIC_REG_TEMP_INT_STAT0		= 0x20,
+	PF1550_PMIC_REG_TEMP_INT_MASK0		= 0x21,
+	PF1550_PMIC_REG_TEMP_INT_SENSE0		= 0x22,
+	PF1550_PMIC_REG_ONKEY_INT_STAT0		= 0x24,
+	PF1550_PMIC_REG_ONKEY_INT_MASK0		= 0x25,
+	PF1550_PMIC_REG_ONKEY_INT_SENSE0	= 0x26,
+	PF1550_PMIC_REG_MISC_INT_STAT0		= 0x28,
+	PF1550_PMIC_REG_MISC_INT_MASK0		= 0x29,
+	PF1550_PMIC_REG_MISC_INT_SENSE0		= 0x2A,
+
+	PF1550_PMIC_REG_COINCELL_CONTROL	= 0x30,
+
+	PF1550_PMIC_REG_SW1_VOLT		= 0x32,
+	PF1550_PMIC_REG_SW1_STBY_VOLT		= 0x33,
+	PF1550_PMIC_REG_SW1_SLP_VOLT		= 0x34,
+	PF1550_PMIC_REG_SW1_CTRL		= 0x35,
+	PF1550_PMIC_REG_SW1_CTRL1		= 0x36,
+	PF1550_PMIC_REG_SW2_VOLT		= 0x38,
+	PF1550_PMIC_REG_SW2_STBY_VOLT		= 0x39,
+	PF1550_PMIC_REG_SW2_SLP_VOLT		= 0x3A,
+	PF1550_PMIC_REG_SW2_CTRL		= 0x3B,
+	PF1550_PMIC_REG_SW2_CTRL1		= 0x3C,
+	PF1550_PMIC_REG_SW3_VOLT		= 0x3E,
+	PF1550_PMIC_REG_SW3_STBY_VOLT		= 0x3F,
+	PF1550_PMIC_REG_SW3_SLP_VOLT		= 0x40,
+	PF1550_PMIC_REG_SW3_CTRL		= 0x41,
+	PF1550_PMIC_REG_SW3_CTRL1		= 0x42,
+	PF1550_PMIC_REG_VSNVS_CTRL		= 0x48,
+	PF1550_PMIC_REG_VREFDDR_CTRL		= 0x4A,
+	PF1550_PMIC_REG_LDO1_VOLT		= 0x4C,
+	PF1550_PMIC_REG_LDO1_CTRL		= 0x4D,
+	PF1550_PMIC_REG_LDO2_VOLT		= 0x4F,
+	PF1550_PMIC_REG_LDO2_CTRL		= 0x50,
+	PF1550_PMIC_REG_LDO3_VOLT		= 0x52,
+	PF1550_PMIC_REG_LDO3_CTRL		= 0x53,
+	PF1550_PMIC_REG_PWRCTRL0		= 0x58,
+	PF1550_PMIC_REG_PWRCTRL1		= 0x59,
+	PF1550_PMIC_REG_PWRCTRL2		= 0x5A,
+	PF1550_PMIC_REG_PWRCTRL3		= 0x5B,
+	PF1550_PMIC_REG_SW1_PWRDN_SEQ		= 0x5F,
+	PF1550_PMIC_REG_SW2_PWRDN_SEQ		= 0x60,
+	PF1550_PMIC_REG_SW3_PWRDN_SEQ		= 0x61,
+	PF1550_PMIC_REG_LDO1_PWRDN_SEQ		= 0x62,
+	PF1550_PMIC_REG_LDO2_PWRDN_SEQ		= 0x63,
+	PF1550_PMIC_REG_LDO3_PWRDN_SEQ		= 0x64,
+	PF1550_PMIC_REG_VREFDDR_PWRDN_SEQ	= 0x65,
+
+	PF1550_PMIC_REG_STATE_INFO		= 0x67,
+	PF1550_PMIC_REG_I2C_ADDR		= 0x68,
+	PF1550_PMIC_REG_IO_DRV0			= 0x69,
+	PF1550_PMIC_REG_IO_DRV1			= 0x6A,
+	PF1550_PMIC_REG_RC_16MHZ		= 0x6B,
+	PF1550_PMIC_REG_KEY			= 0x6F,
+
+	/* charger part */
+	PF1550_CHARG_REG_CHG_INT		= 0x80,
+	PF1550_CHARG_REG_CHG_INT_MASK		= 0x82,
+	PF1550_CHARG_REG_CHG_INT_OK		= 0x84,
+	PF1550_CHARG_REG_VBUS_SNS		= 0x86,
+	PF1550_CHARG_REG_CHG_SNS		= 0x87,
+	PF1550_CHARG_REG_BATT_SNS		= 0x88,
+	PF1550_CHARG_REG_CHG_OPER		= 0x89,
+	PF1550_CHARG_REG_CHG_TMR		= 0x8A,
+	PF1550_CHARG_REG_CHG_EOC_CNFG		= 0x8D,
+	PF1550_CHARG_REG_CHG_CURR_CNFG		= 0x8E,
+	PF1550_CHARG_REG_BATT_REG		= 0x8F,
+	PF1550_CHARG_REG_BATFET_CNFG		= 0x91,
+	PF1550_CHARG_REG_THM_REG_CNFG		= 0x92,
+	PF1550_CHARG_REG_VBUS_INLIM_CNFG	= 0x94,
+	PF1550_CHARG_REG_VBUS_LIN_DPM		= 0x95,
+	PF1550_CHARG_REG_USB_PHY_LDO_CNFG	= 0x96,
+	PF1550_CHARG_REG_DBNC_DELAY_TIME	= 0x98,
+	PF1550_CHARG_REG_CHG_INT_CNFG		= 0x99,
+	PF1550_CHARG_REG_THM_ADJ_SETTING	= 0x9A,
+	PF1550_CHARG_REG_VBUS2SYS_CNFG		= 0x9B,
+	PF1550_CHARG_REG_LED_PWM		= 0x9C,
+	PF1550_CHARG_REG_FAULT_BATFET_CNFG	= 0x9D,
+	PF1550_CHARG_REG_LED_CNFG		= 0x9E,
+	PF1550_CHARG_REG_CHGR_KEY2		= 0x9F,
+
+	PF1550_TEST_REG_FMRADDR			= 0xC4,
+	PF1550_TEST_REG_FMRDATA			= 0xC5,
+	PF1550_TEST_REG_KEY3			= 0xDF,
+
+	PF1550_PMIC_REG_END			= 0xff,
+};
+
+#define PF1550_CHG_PRECHARGE		0
+#define PF1550_CHG_CONSTANT_CURRENT	1
+#define PF1550_CHG_CONSTANT_VOL		2
+#define PF1550_CHG_EOC			3
+#define PF1550_CHG_DONE			4
+#define PF1550_CHG_TIMER_FAULT		6
+#define PF1550_CHG_SUSPEND		7
+#define PF1550_CHG_OFF_INV		8
+#define PF1550_CHG_BAT_OVER		9
+#define PF1550_CHG_OFF_TEMP		10
+#define PF1550_CHG_LINEAR_ONLY		12
+#define PF1550_CHG_SNS_MASK		0xf
+
+#define PF1550_BAT_NO_VBUS		0
+#define PF1550_BAT_LOW_THAN_PRECHARG	1
+#define PF1550_BAT_CHARG_FAIL		2
+#define PF1550_BAT_HIGH_THAN_PRECHARG	4
+#define PF1550_BAT_OVER_VOL		5
+#define	PF1550_BAT_NO_DETECT		6
+#define PF1550_BAT_SNS_MASK		0x7
+
+#define PF1550_VBUS_UVLO		BIT(2)
+#define PF1550_VBUS_IN2SYS		BIT(3)
+#define PF1550_VBUS_OVLO		BIT(4)
+#define PF1550_VBUS_VALID		BIT(5)
+
+#define PF1550_CHG_INT_OK_VBUS_OK BIT(5)
+
+#define PF1550_CHARG_REG_BATT_REG_CHGCV_MASK		0x3f
+#define PF1550_CHARG_REG_BATT_REG_VMINSYS_SHIFT		6
+#define PF1550_CHARG_REG_BATT_REG_VMINSYS_MASK		(0x3 << 6)
+#define PF1550_CHARG_REG_THM_REG_CNFG_REGTEMP_SHIFT	2
+#define PF1550_CHARG_REG_THM_REG_CNFG_REGTEMP_MASK	(0x3 << 2)
+
+#define PMIC_IRQ_SW1_LS		BIT(0)
+#define PMIC_IRQ_SW2_LS		BIT(1)
+#define PMIC_IRQ_SW3_LS		BIT(2)
+#define PMIC_IRQ_SW1_HS		BIT(0)
+#define PMIC_IRQ_SW2_HS		BIT(1)
+#define PMIC_IRQ_SW3_HS		BIT(2)
+#define PMIC_IRQ_LDO1_FAULT	BIT(0)
+#define PMIC_IRQ_LDO2_FAULT	BIT(1)
+#define PMIC_IRQ_LDO3_FAULT	BIT(2)
+#define PMIC_IRQ_TEMP_110	BIT(0)
+#define PMIC_IRQ_TEMP_125	BIT(1)
+
+#define ONKEY_IRQ_PUSHI		BIT(0)
+#define ONKEY_IRQ_1SI		BIT(1)
+#define ONKEY_IRQ_2SI		BIT(2)
+#define ONKEY_IRQ_3SI		BIT(3)
+#define ONKEY_IRQ_4SI		BIT(4)
+#define ONKEY_IRQ_8SI		BIT(5)
+
+#define CHARG_IRQ_BAT2SOCI	BIT(1)
+#define CHARG_IRQ_BATI		BIT(2)
+#define CHARG_IRQ_CHGI		BIT(3)
+#define CHARG_IRQ_VBUSI		BIT(5)
+#define CHARG_IRQ_DPMI		BIT(6)
+#define CHARG_IRQ_THMI		BIT(7)
+
+#define VBUS_LIN_ILIM_SHIFT 3
+
+enum pf1550_pmic_irq {
+	PF1550_PMIC_IRQ_SW1_LS,
+	PF1550_PMIC_IRQ_SW2_LS,
+	PF1550_PMIC_IRQ_SW3_LS,
+	PF1550_PMIC_IRQ_SW1_HS,
+	PF1550_PMIC_IRQ_SW2_HS,
+	PF1550_PMIC_IRQ_SW3_HS,
+	PF1550_PMIC_IRQ_LDO1_FAULT,
+	PF1550_PMIC_IRQ_LDO2_FAULT,
+	PF1550_PMIC_IRQ_LDO3_FAULT,
+	PF1550_PMIC_IRQ_TEMP_110,
+	PF1550_PMIC_IRQ_TEMP_125,
+};
+
+enum pf1550_onkey_irq {
+	PF1550_ONKEY_IRQ_PUSHI,
+	PF1550_ONKEY_IRQ_1SI,
+	PF1550_ONKEY_IRQ_2SI,
+	PF1550_ONKEY_IRQ_3SI,
+	PF1550_ONKEY_IRQ_4SI,
+	PF1550_ONKEY_IRQ_8SI,
+};
+
+enum pf1550_charg_irq {
+	PF1550_CHARG_IRQ_BAT2SOCI,
+	PF1550_CHARG_IRQ_BATI,
+	PF1550_CHARG_IRQ_CHGI,
+	PF1550_CHARG_IRQ_VBUSI,
+	PF1550_CHARG_IRQ_THMI,
+};
+
+enum pf1550_regulators {
+	PF1550_SW1,
+	PF1550_SW2,
+	PF1550_SW3,
+	PF1550_VREFDDR,
+	PF1550_LDO1,
+	PF1550_LDO2,
+	PF1550_LDO3,
+};
+
+
+
+enum pf1550_ilim {
+	_10ma = 0,
+	_15ma = 1,
+	_20ma = 2,
+	_25ma = 3,
+	_30ma = 4,
+	_35ma = 5,
+	_40ma = 6,
+	_45ma = 7,
+	_50ma = 8,
+	_100ma = 9,
+	_150ma = 10,
+	_200ma = 11,
+	_300ma = 12,
+	_400ma = 13,
+	_500ma = 14,
+	_600ma = 15,
+	_700ma = 16,
+	_800ma = 17,
+	_900ma = 18,
+	_1000ma = 19,
+	_1500ma = 20,
+};
+
+
+void init_pf1550_pmic(void);
+
+void set_charging_current(int mA);
+
+int pf1550_write_reg(int reg, u8 val);
+
+int pf1550_read_reg(int reg, u8* val);
+
+int get_usb_cable_state(void);
+
+int get_onoff_key(void);
+
+void power_off();
+
+void reboot(void);
+
+
+
+
+#endif /* __LINUX_MFD_PF1550_H */
