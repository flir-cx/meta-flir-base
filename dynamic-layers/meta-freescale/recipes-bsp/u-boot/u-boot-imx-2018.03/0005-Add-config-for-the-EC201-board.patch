From 2a3a93bc1f8d7bfd291f3703999c9a545458ca7d Mon Sep 17 00:00:00 2001
From: David Sernelius <david.sernelius@flir.se>
Date: Tue, 22 Jan 2019 13:04:35 +0100
Subject: [PATCH] Add config for the EC201 board

---
 arch/arm/dts/Makefile            |   1 +
 arch/arm/dts/imx7ulp-ec201.dts   | 183 ++++++++++++++++
 arch/arm/mach-imx/mx7ulp/Kconfig |   5 +
 board/flir/ec201/Kconfig         |  12 +
 board/flir/ec201/Makefile        |   9 +
 board/flir/ec201/ec201.c         |  87 ++++++++
 board/flir/ec201/imximage.cfg    | 122 +++++++++++
 configs/mx7ulp_ec201_defconfig   |  74 +++++++
 include/configs/ec201.h          | 364 +++++++++++++++++++++++++++++++
 9 files changed, 857 insertions(+)
 create mode 100644 arch/arm/dts/imx7ulp-ec201.dts
 create mode 100644 board/flir/ec201/Kconfig
 create mode 100644 board/flir/ec201/Makefile
 create mode 100644 board/flir/ec201/ec201.c
 create mode 100644 board/flir/ec201/imximage.cfg
 create mode 100644 configs/mx7ulp_ec201_defconfig
 create mode 100644 include/configs/ec201.h

diff --git a/arch/arm/dts/Makefile b/arch/arm/dts/Makefile
index 7428aa0650..ef10070e94 100644
--- a/arch/arm/dts/Makefile
+++ b/arch/arm/dts/Makefile
@@ -457,6 +457,7 @@ dtb-$(CONFIG_MX7) += imx7-colibri.dtb \
 
 dtb-$(CONFIG_ARCH_MX7ULP) += imx7ulp-evk.dtb \
 	imx7ulp-bblc.dtb \
+	imx7ulp-ec201.dtb \
 	imx7ulp-evk-emmc.dtb \
 	imx7ulp-evk-qspi.dtb \
 	imx7ulp-10x10-arm2.dtb \
diff --git a/arch/arm/dts/imx7ulp-ec201.dts b/arch/arm/dts/imx7ulp-ec201.dts
new file mode 100644
index 0000000000..095ae08fea
--- /dev/null
+++ b/arch/arm/dts/imx7ulp-ec201.dts
@@ -0,0 +1,183 @@
+/*
+ * Copyright 2018 FLIR
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include "imx7ulp.dtsi"
+
+/ {
+	model = "FLIR Low Cost Platform Board (EC201)";
+	compatible = "flir,imx7ulp-ec201", "fsl,imx7ulp", "Generic DT based system";
+
+	chosen {
+		stdout-path = &lpuart4;
+	};
+
+	memory {
+		device_type = "memory";
+		reg = <0x60000000 0x20000000>;
+	};
+
+	regulators {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <0>;
+	};
+};
+
+&iomuxc1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_hog_1>;
+
+	pinctrl_hog_1: hoggrp-1 {
+		fsl,pins = <
+			IMX7ULP_PAD_PTC0__PTC0 0x30100  //SHUTTER_IN
+			IMX7ULP_PAD_PTC1__PTC1 0x30100  //SHUTTER_OUT
+		>;
+	};
+
+	pinctrl_usdhc0: usdhc0grp {
+		fsl,pins = <
+			IMX7ULP_PAD_PTD0__PTD0         0x20000     /* USDHC0 RST */
+			IMX7ULP_PAD_PTD1__SDHC0_CMD    0x43
+			IMX7ULP_PAD_PTD2__SDHC0_CLK    0x10042
+			IMX7ULP_PAD_PTD3__SDHC0_D7     0x43
+			IMX7ULP_PAD_PTD4__SDHC0_D6     0x43
+			IMX7ULP_PAD_PTD5__SDHC0_D5     0x43
+			IMX7ULP_PAD_PTD6__SDHC0_D4     0x43
+			IMX7ULP_PAD_PTD7__SDHC0_D3     0x43
+			IMX7ULP_PAD_PTD8__SDHC0_D2     0x43
+			IMX7ULP_PAD_PTD9__SDHC0_D1     0x43
+			IMX7ULP_PAD_PTD10__SDHC0_D0    0x43
+			IMX7ULP_PAD_PTD11__SDHC0_DQS   0x42
+		>;
+	};
+
+	pinctrl_usdhc1: usdhc1grp {
+		fsl,pins = <
+			IMX7ULP_PAD_PTE3__SDHC1_CMD    0x43
+			IMX7ULP_PAD_PTE2__SDHC1_CLK    0x10042
+			IMX7ULP_PAD_PTE1__SDHC1_D0     0x43
+			IMX7ULP_PAD_PTE0__SDHC1_D1     0x43
+			IMX7ULP_PAD_PTE5__SDHC1_D2     0x43
+			IMX7ULP_PAD_PTE4__SDHC1_D3     0x43
+		>;
+	};
+
+	pinctrl_lpi2c5: lpi2c5grp {
+		fsl,pins = <
+			IMX7ULP_PAD_PTC4__LPI2C5_SCL   0x27
+			IMX7ULP_PAD_PTC5__LPI2C5_SDA   0x27
+		>;
+	};
+
+	pinctrl_lpi2c6: lpi2c6grp {
+		fsl,pins = <
+			IMX7ULP_PAD_PTC8__LPI2C6_SCL   0x27
+			IMX7ULP_PAD_PTC9__LPI2C6_SDA   0x27
+		>;
+	};
+
+	pinctrl_lpi2c7: lpi2c7grp {
+		fsl,pins = <
+			IMX7ULP_PAD_PTC12__LPI2C7_SCL  0x27
+			IMX7ULP_PAD_PTC13__LPI2C7_SDA  0x27
+		>;
+	};
+
+	pinctrl_lpuart4: lpuart4grp {
+		fsl,pins = <
+			IMX7ULP_PAD_PTC3__LPUART4_RX   0x3
+			IMX7ULP_PAD_PTC2__LPUART4_TX   0x3
+		>;
+	};
+
+	pinctrl_lpuart6: lpuart6grp {
+		fsl,pins = <
+			IMX7ULP_PAD_PTE10__LPUART6_TX      0x3
+			IMX7ULP_PAD_PTE11__LPUART6_RX      0x3
+			IMX7ULP_PAD_PTE9__LPUART6_RTS_B    0x3
+			IMX7ULP_PAD_PTE8__LPUART6_CTS_B    0x3
+		>;
+	};
+};
+
+/* Touch screen */
+&lpi2c7 {
+	#address-cells = <1>;
+	#size-cells = <0>;
+	pinctrl-names = "default",  "sleep";
+	pinctrl-0 = <&pinctrl_lpi2c7>;
+	pinctrl-1 = <&pinctrl_lpi2c7>;
+	status = "okay";
+};
+
+/*  IO expander for keyboard, VCAM, Lepton, Temp sensor 1 and 2, EEPROM */
+&lpi2c6 {
+	#address-cells = <1>;
+	#size-cells = <0>;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&pinctrl_lpi2c6>;
+	pinctrl-1 = <&pinctrl_lpi2c6>;
+	status = "okay";
+};
+
+/*  PMIC */
+&lpi2c5 {
+	#address-cells = <1>;
+	#size-cells = <0>;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&pinctrl_lpi2c5>;
+	pinctrl-1 = <&pinctrl_lpi2c5>;
+	status = "okay";
+};
+
+&lpuart4 { /* console */
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&pinctrl_lpuart4>;
+	pinctrl-1 = <&pinctrl_lpuart4>;
+	status = "okay";
+};
+
+&lpuart6 { /* BT */
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&pinctrl_lpuart6>;
+	pinctrl-1 = <&pinctrl_lpuart6>;
+	status = "okay";
+};
+
+&usbotg1 {
+	dr_mode = "peripheral";
+	srp-disable;
+	hnp-disable;
+	adp-disable;
+	status = "okay";
+};
+
+/* emmc */
+&usdhc0 {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&pinctrl_usdhc0>;
+	pinctrl-1 = <&pinctrl_usdhc0>;
+	bus-width = <8>;
+	non-removable;
+	status = "okay";
+};
+
+/* wifi */
+&usdhc1 {
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&pinctrl_usdhc1>;
+	pinctrl-1 = <&pinctrl_usdhc1>;
+	bus-width = <4>;
+	pm-ignore-notify;
+	keep-power-in-suspend;
+	non-removable;
+	wifi-host;
+	status = "okay";
+};
diff --git a/arch/arm/mach-imx/mx7ulp/Kconfig b/arch/arm/mach-imx/mx7ulp/Kconfig
index 3cbb9758e9..51f1000bdd 100644
--- a/arch/arm/mach-imx/mx7ulp/Kconfig
+++ b/arch/arm/mach-imx/mx7ulp/Kconfig
@@ -36,10 +36,15 @@ config TARGET_MX7ULP_BBLC
 	bool "Support FLIR bblc brass board"
 	select MX7ULP
 
+config TARGET_MX7ULP_EC201
+	bool "Support FLIR low cost platform board (EC201)"
+	select MX7ULP
+
 endchoice
 
 source "board/freescale/mx7ulp_arm2/Kconfig"
 source "board/freescale/mx7ulp_evk/Kconfig"
 source "board/flir/bblc/Kconfig"
+source "board/flir/ec201/Kconfig"
 
 endif
diff --git a/board/flir/ec201/Kconfig b/board/flir/ec201/Kconfig
new file mode 100644
index 0000000000..d6085b09c4
--- /dev/null
+++ b/board/flir/ec201/Kconfig
@@ -0,0 +1,12 @@
+if TARGET_MX7ULP_EC201
+
+config SYS_BOARD
+	default "ec201"
+
+config SYS_VENDOR
+	default "flir"
+
+config SYS_CONFIG_NAME
+	default "ec201"
+
+endif
diff --git a/board/flir/ec201/Makefile b/board/flir/ec201/Makefile
new file mode 100644
index 0000000000..dbb3969820
--- /dev/null
+++ b/board/flir/ec201/Makefile
@@ -0,0 +1,9 @@
+#
+#  Copyright 2018 FLIR
+#
+#  This program is free software; you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License version 2 as
+#  published by the Free Software Foundation.
+#
+
+obj-y  := ec201.o
diff --git a/board/flir/ec201/ec201.c b/board/flir/ec201/ec201.c
new file mode 100644
index 0000000000..3e969c6929
--- /dev/null
+++ b/board/flir/ec201/ec201.c
@@ -0,0 +1,87 @@
+/*
+ * Copyright 2018 FLIR
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/arch/mx7ulp-pins.h>
+#include <asm/arch/iomux.h>
+#include <asm/gpio.h>
+#include <usb.h>
+#include <dm.h>
+
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define UART_PAD_CTRL	(PAD_CTL_PUS_UP)
+
+int dram_init(void)
+{
+	gd->ram_size = PHYS_SDRAM_SIZE;
+
+	return 0;
+}
+
+static iomux_cfg_t const lpuart4_pads[] = {
+	MX7ULP_PAD_PTC3__LPUART4_RX | MUX_PAD_CTRL(UART_PAD_CTRL),
+	MX7ULP_PAD_PTC2__LPUART4_TX | MUX_PAD_CTRL(UART_PAD_CTRL),
+};
+
+static void setup_iomux_uart(void)
+{
+	mx7ulp_iomux_setup_multiple_pads(lpuart4_pads,
+					 ARRAY_SIZE(lpuart4_pads));
+}
+
+
+#ifdef CONFIG_DM_USB
+static void setup_usb(void)
+{
+}
+
+int board_ehci_usb_phy_mode(struct udevice *dev)
+{
+	return USB_INIT_HOST;
+}
+#endif
+
+int board_early_init_f(void)
+{
+	setup_iomux_uart();
+
+	return 0;
+}
+
+
+int board_init(void)
+{
+	/* address of boot parameters */
+	gd->bd->bi_boot_params = PHYS_SDRAM + 0x100;
+
+#ifdef CONFIG_DM_USB
+	setup_usb();
+#endif
+
+	return 0;
+}
+
+int board_mmc_get_env_dev(int devno)
+{
+	return devno;
+}
+
+int board_late_init(void)
+{
+
+#ifdef CONFIG_ENV_IS_IN_MMC
+	board_late_mmc_env_init();
+#endif
+
+	return 0;
+}
+
diff --git a/board/flir/ec201/imximage.cfg b/board/flir/ec201/imximage.cfg
new file mode 100644
index 0000000000..5ffaf94f4f
--- /dev/null
+++ b/board/flir/ec201/imximage.cfg
@@ -0,0 +1,122 @@
+/*
+ * Copyright 2018 FLIR
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#define __ASSEMBLY__
+#include <config.h>
+
+/* image version */
+
+IMAGE_VERSION 2
+
+/*
+ * Boot Device : one of
+ * spi/sd/nand/onenand, qspi/nor
+ */
+
+BOOT_FROM	sd
+
+
+/*
+ * Device Configuration Data (DCD)
+ *
+ * Each entry must have the format:
+ * Addr-type           Address        Value
+ *
+ * where:
+ *	Addr-type register length (1,2 or 4 bytes)
+ *	Address	  absolute address of the register
+ *	value	  value to be stored in the register
+ */
+DATA 4   0x403f00dc 0x00000000
+DATA 4   0x403e0040 0x01000020
+DATA 4   0x403e0500 0x01000000
+DATA 4   0x403e050c 0x80808080
+DATA 4   0x403e0508 0x00160002
+DATA 4   0x403E0510 0x00000001
+DATA 4   0x403E0514 0x00000014
+DATA 4   0x403e0500 0x00000001
+CHECK_BITS_SET 4 0x403e0500 0x01000000
+DATA 4   0x403e050c 0x8080801B
+CHECK_BITS_SET 4 0x403e050c 0x00000040
+DATA 4   0x403E0030 0x00000001
+DATA 4   0x403e0040 0x11000020
+DATA 4   0x403f00dc 0x42000000
+
+DATA 4   0x40B300AC 0x40000000
+
+DATA 4   0x40AD0128 0x00040000
+DATA 4   0x40AD00F8 0x00000000
+DATA 4   0x40AD00D8 0x00000180
+DATA 4   0x40AD0108 0x00000180
+DATA 4   0x40AD0104 0x00000180
+DATA 4   0x40AD0124 0x00010000
+DATA 4   0x40AD0080 0x0000018C
+DATA 4   0x40AD0084 0x0000018C
+DATA 4   0x40AD0088 0x0000018C
+DATA 4   0x40AD008C 0x0000018C
+
+DATA 4   0x40AD0120 0x00010000
+DATA 4   0x40AD010C 0x00000180
+DATA 4   0x40AD0110 0x00000180
+DATA 4   0x40AD0114 0x00000180
+DATA 4   0x40AD0118 0x00000180
+DATA 4   0x40AD0090 0x00000180
+DATA 4   0x40AD0094 0x00000180
+DATA 4   0x40AD0098 0x00000180
+DATA 4   0x40AD009C 0x00000180
+
+DATA 4   0x40AD00E0 0x00040000
+DATA 4   0x40AD00E4 0x00040000
+
+DATA 4   0x40AB001C 0x00008000
+DATA 4   0x40AB0800 0xA1390003
+DATA 4   0x40AB085C 0x0D3900A0
+DATA 4   0x40AB0890 0x00400000
+
+DATA 4   0x40AB0848 0x40404040
+DATA 4   0x40AB0850 0x40404040
+DATA 4   0x40AB081C 0x33333333
+DATA 4   0x40AB0820 0x33333333
+DATA 4   0x40AB0824 0x33333333
+DATA 4   0x40AB0828 0x33333333
+
+DATA 4   0x40AB08C0 0x24922492
+DATA 4   0x40AB08B8 0x00000800
+
+DATA 4   0x40AB0004 0x00020052
+DATA 4   0x40AB000C 0x292C42F3
+DATA 4   0x40AB0010 0x00100A22
+DATA 4   0x40AB0038 0x00120556
+DATA 4   0x40AB0014 0x00C700DB
+DATA 4   0x40AB0018 0x00211718
+DATA 4   0x40AB002C 0x0F9F26D2
+DATA 4   0x40AB0030 0x009F0E10
+DATA 4   0x40AB0040 0x0000003F
+DATA 4   0x40AB0000 0xC3190000
+
+DATA 4   0x40AB001C 0x00008010
+DATA 4   0x40AB001C 0x00008018
+DATA 4   0x40AB001C 0x003F8030
+DATA 4   0x40AB001C 0x003F8038
+DATA 4   0x40AB001C 0xFF0A8030
+DATA 4   0x40AB001C 0xFF0A8038
+DATA 4   0x40AB001C 0x04028030
+DATA 4   0x40AB001C 0x04028038
+DATA 4   0x40AB001C 0x83018030
+DATA 4   0x40AB001C 0x83018038
+DATA 4   0x40AB001C 0x01038030
+DATA 4   0x40AB001C 0x01038038
+
+DATA 4   0x40AB083C 0x20000000
+
+DATA 4   0x40AB0020 0x00001800
+DATA 4   0x40AB0800 0xA1310000
+DATA 4   0x40AB0004 0x00020052
+DATA 4   0x40AB0404 0x00011006
+DATA 4   0x40AB001C 0x00000000
+
diff --git a/configs/mx7ulp_ec201_defconfig b/configs/mx7ulp_ec201_defconfig
new file mode 100644
index 0000000000..e04e4f245c
--- /dev/null
+++ b/configs/mx7ulp_ec201_defconfig
@@ -0,0 +1,74 @@
+CONFIG_ARM=y
+CONFIG_ARCH_MX7ULP=y
+CONFIG_SYS_TEXT_BASE=0x67800000
+# CONFIG_AUTOBOOT is not set
+CONFIG_TARGET_MX7ULP_EC201=y
+CONFIG_DEFAULT_FDT_FILE="imx7ulp-ec201.dtb"
+CONFIG_DEFAULT_DEVICE_TREE="imx7ulp-ec201"
+CONFIG_SYS_EXTRA_OPTIONS="IMX_CONFIG=board/flir/ec201/imximage.cfg"
+CONFIG_BOARD_EARLY_INIT_F=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_BOOTZ=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_DHCP=y
+CONFIG_OF_CONTROL=y
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_DM=y
+CONFIG_DM_GPIO=y
+CONFIG_IMX_RGPIO2P=y
+# CONFIG_MXC_GPIO is not set
+CONFIG_DM_I2C=y
+CONFIG_DM_MMC=y
+CONFIG_SYS_I2C_IMX_LPI2C=y
+CONFIG_PINCTRL=y
+CONFIG_PINCTRL_IMX7ULP=y
+CONFIG_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_DM_SERIAL=y
+CONFIG_FSL_LPUART=y
+# CONFIG_CMD_SF=y
+# CONFIG_FSL_QSPI=y
+# CONFIG_DM_SPI=y
+# CONFIG_DM_SPI_FLASH=y
+# CONFIG_SPI_FLASH=y
+# CONFIG_SPI_FLASH_MACRONIX=y
+CONFIG_ULP_WATCHDOG=y
+# CONFIG_CMD_USB=y
+# CONFIG_USB=y
+# CONFIG_DM_USB=y
+# CONFIG_USB_EHCI_HCD=y
+# CONFIG_MXC_USB_OTG_HACTIVE=y
+# CONFIG_USB_STORAGE=y
+# CONFIG_USB_HOST_ETHER=y
+# CONFIG_USB_ETHER_ASIX=y
+# CONFIG_USB_ETHER_RTL8152=y
+# CONFIG_VIDEO=y
+#
+# CONFIG_IMX_NORTHWEST_MIPI_DSI=y
+# CONFIG_USB_FUNCTION_FASTBOOT=y
+# CONFIG_USB_GADGET=y
+# CONFIG_USB_GADGET_DOWNLOAD=y
+# CONFIG_USB_GADGET_MANUFACTURER="FSL"
+# CONFIG_USB_GADGET_VENDOR_NUM=0x0525
+# CONFIG_USB_GADGET_PRODUCT_NUM=0xa4a5
+# CONFIG_CI_UDC=y
+# CONFIG_FSL_FASTBOOT=y
+# CONFIG_FASTBOOT=y
+# CONFIG_FASTBOOT_BUF_ADDR=0x60800000
+# CONFIG_FASTBOOT_BUF_SIZE=0x20000000
+# CONFIG_FASTBOOT_FLASH=y
+# CONFIG_FASTBOOT_FLASH_MMC_DEV=1
+# CONFIG_EFI_PARTITION=y
+# CONFIG_CMD_READ=y
+CONFIG_IMX_BOOTAUX=y
+CONFIG_DOS_PARTITION=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_GPT=y
+CONFIG_EFI_PARTITION=y
+CONFIG_AUTOBOOT=y
+CONFIG_BOOTDELAY=0
diff --git a/include/configs/ec201.h b/include/configs/ec201.h
new file mode 100644
index 0000000000..6c7c8bdf1d
--- /dev/null
+++ b/include/configs/ec201.h
@@ -0,0 +1,364 @@
+/*
+ * Copyright 2018 FLIR
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __MX7ULP_EC201_CONFIG_H
+#define __MX7ULP_EC201_CONFIG_H
+
+#include <linux/sizes.h>
+#include <asm/arch/imx-regs.h>
+
+
+#define CONFIG_BOARD_POSTCLK_INIT
+#define CONFIG_SYS_BOOTM_LEN		0x1000000
+
+#define SRC_BASE_ADDR			CMC1_RBASE
+#define IRAM_BASE_ADDR			OCRAM_0_BASE
+#define IOMUXC_BASE_ADDR		IOMUXC1_RBASE
+
+/* Fuses */
+#define CONFIG_CMD_FUSE
+#define CONFIG_MXC_OCOTP
+
+#define CONFIG_BOUNCE_BUFFER
+#define CONFIG_FSL_ESDHC
+#define CONFIG_FSL_USDHC
+#define CONFIG_SUPPORT_EMMC_BOOT /* eMMC specific */
+
+#define CONFIG_SYS_FSL_USDHC_NUM        1
+#define CONFIG_SYS_FSL_ESDHC_ADDR       0
+
+
+#define CONFIG_ENV_IS_IN_MMC
+#define CONFIG_SYS_MMC_ENV_DEV          0      /* emmc0 */
+#define CONFIG_ENV_SIZE			SZ_16K
+#define CONFIG_ENV_OFFSET		(1792 * 1024)	/* 256kB below 2MiB */
+#define CONFIG_ENV_OFFSET_REDUND	(CONFIG_ENV_OFFSET + (128 * 1024))
+#define CONFIG_ENV_SIZE_REDUND		CONFIG_ENV_SIZE
+
+
+#define CONFIG_CMD_FAT
+
+/* Using ULP WDOG for reset */
+#define WDOG_BASE_ADDR			WDG1_RBASE
+
+#define CONFIG_SYS_ARCH_TIMER
+#define CONFIG_SYS_HZ_CLOCK		1000000 /* Fixed at 1Mhz from TSTMR */
+
+#define CONFIG_INITRD_TAG
+#define CONFIG_CMDLINE_TAG
+#define CONFIG_SETUP_MEMORY_TAGS
+/*#define CONFIG_REVISION_TAG*/
+
+/* Size of malloc() pool */
+#define CONFIG_SYS_MALLOC_LEN		(8 * SZ_1M)
+
+/* UART */
+#define LPUART_BASE			LPUART4_RBASE
+
+/* allow to overwrite serial and ethaddr */
+#define CONFIG_ENV_OVERWRITE
+#define CONFIG_CONS_INDEX		1
+#define CONFIG_BAUDRATE			115200
+
+#undef CONFIG_CMD_IMLS
+#define CONFIG_SYS_LONGHELP
+#define CONFIG_AUTO_COMPLETE
+
+#define CONFIG_SYS_CACHELINE_SIZE      64
+
+/* Miscellaneous configurable options */
+#define CONFIG_SYS_PROMPT		"=> "
+#define CONFIG_SYS_CBSIZE		512
+
+/* Print Buffer Size */
+#define CONFIG_SYS_MAXARGS		256
+#define CONFIG_SYS_BARGSIZE CONFIG_SYS_CBSIZE
+#define CONFIG_SYS_PBSIZE (CONFIG_SYS_CBSIZE + sizeof(CONFIG_SYS_PROMPT) + 16)
+
+#define CONFIG_CMDLINE_EDITING
+#define CONFIG_STACKSIZE		SZ_8K
+
+/* Physical Memory Map */
+#define CONFIG_NR_DRAM_BANKS		1
+
+#define CONFIG_SYS_TEXT_BASE		0x67800000
+#define PHYS_SDRAM			0x60000000
+#define PHYS_SDRAM_SIZE			SZ_512M
+#define CONFIG_SYS_MEMTEST_START	PHYS_SDRAM
+#define CONFIG_SYS_SDRAM_BASE		PHYS_SDRAM
+#define CONFIG_CMD_BOOTZ
+
+#define CONFIG_LOADADDR             0x60800000
+
+#define CONFIG_CMD_MEMTEST
+#define CONFIG_SYS_MEMTEST_END      0x9E000000
+
+
+#define CONFIG_SYS_HZ			1000
+#define CONFIG_SYS_LOAD_ADDR		CONFIG_LOADADDR
+
+#define CONFIG_SYS_INIT_RAM_ADDR	IRAM_BASE_ADDR
+#define CONFIG_SYS_INIT_RAM_SIZE	SZ_256K
+
+#define CONFIG_SYS_INIT_SP_OFFSET \
+	(CONFIG_SYS_INIT_RAM_SIZE - GENERATED_GBL_DATA_SIZE)
+#define CONFIG_SYS_INIT_SP_ADDR \
+	(CONFIG_SYS_INIT_RAM_ADDR + CONFIG_SYS_INIT_SP_OFFSET)
+
+#ifndef CONFIG_SYS_DCACHE_OFF
+#define CONFIG_CMD_CACHE
+#endif
+
+
+#ifdef is_boot_from_usb
+#undef is_boot_from_usb
+#endif
+
+
+/* protected environment variables (besides ethaddr and serial#) */
+#define CONFIG_ENV_FLAGS_LIST_STATIC	\
+	"wlanaddr:mc,"			\
+	"btaddr:mc,"			\
+	"bootargs_once:sr"
+
+
+/* Pool of randomly generated UUIDs at host machine */
+#define RANDOM_UUIDS	\
+	"uuid_disk=075e2a9b-6af6-448c-a52a-3a6e69f0afff\0" \
+	"part1_uuid=43f1961b-ce4c-4e6c-8f22-2230c5d532bd\0" \
+	"part2_uuid=f241b915-4241-47fd-b4de-ab5af832a0f6\0" \
+	"part3_uuid=1c606ef5-f1ac-43b9-9bb5-d5c578580b6b\0" \
+	"part4_uuid=c7d8648b-76f7-4e2b-b829-e95a83cc7b32\0" \
+	"part5_uuid=ebae5694-6e56-497c-83c6-c4455e12d727\0" \
+	"part6_uuid=3845c9fc-e581-49f3-999f-86c9bab515ef\0" \
+	"part7_uuid=3fcf7bf1-b6fe-419d-9a14-f87950727bc0\0" \
+	"part8_uuid=12c08a28-fb40-430a-a5bc-7b4f015b0b3c\0" \
+	"part9_uuid=dc83dea8-c467-45dc-84eb-5e913daec17e\0"
+
+
+#define CONFIG_OVERWRITE_ETHADDR_ONCE
+#define CONFIG_DEFAULT_NETWORK_SETTINGS	\
+	"wlanaddr=00:04:f3:ff:ff:fb\0" \
+	"btaddr=00:04:f3:ff:ff:fc\0" \
+	"ipaddr=192.168.42.30\0" \
+	"serverip=192.168.42.1\0" \
+	"netmask=255.255.0.0\0"
+
+
+/* Selects device tree*
+ * Reads select-device-tree-script from boot partition
+ * and  selects which device tree to use based on board article nr
+ * update-fdt updates device tree with board article numbers
+ */
+#define CONFIG_SELECT_FDT_FILE_ENV \
+	"fdt_file=""\0" \
+	"fdt_file_default=" CONFIG_DEFAULT_FDT_FILE "\0"\
+	"select_fdt_script=select-fdt.uscr\0" \
+	"update-fdt=" \
+			  "if ext4load mmc ${mmcdev}:${mmcpart} ${tempaddr} /boot/update-fdt.uscr; then " \
+					"source ${tempaddr}; " \
+			  "fi\0 " \
+	"selectfdtfile=" \
+			"if test -n ${fdt_file};then " \
+				  "echo Devicetree file already selected;" \
+			"else " \
+				  "if ext4load mmc ${mmcdev}:${mmcpart} ${tempaddr} /boot/${select_fdt_script}; then " \
+						"source ${tempaddr}; " \
+				  "else;" \
+						"setenv fdt_file ${fdt_file_default};" \
+				  "fi; " \
+		   "fi\0" \
+	"selectrecfdtfile=" \
+		   "if fatload mmc ${mmcdev}:1 ${tempaddr} ${select_fdt_script}; then " \
+				  "source ${tempaddr}; " \
+		   "else;" \
+				  "setenv fdt_file ${fdt_file_default};" \
+		   "fi\0"
+
+
+/* FLIR partition creation*
+ * 
+ * parition1 = recovery		40 MiB
+ * parition2 = rootfs1		512 MiB
+ * parition3 = rootfs2		512 MiB
+ * parition4 = rootfsrw		128 MiB
+ * parition5 = apps			512 MiB
+ * parition6 = data			512 MiB
+ * parition7 = spare
+ */
+#define CONFIG_PARTITION_FLIR_ENV \
+	"parts_flir=\"uuid_disk=${uuid_disk};" \
+		"start=2MiB,name=recovery,size=40MiB,uuid=${part1_uuid};" \
+		"name=rootfs1,size=512MiB,uuid=${part2_uuid};" \
+		"name=rootfs2,size=512MiB,uuid=${part3_uuid};" \
+		"name=rootfsrw,size=128MiB,uuid=${part4_uuid};" \
+		"name=apps,size=512MiB,uuid=${part5_uuid};" \
+		"name=data,size=512MiB,uuid=${part6_uuid};" \
+		"name=spare,size=-,uuid=${part7_uuid};\"\0" \
+	"partition_mmc_flir=mmc rescan; " \
+		"if mmc dev ${mmcdev} 0; then " \
+			  "gpt write mmc ${mmcdev} ${parts_flir}; " \
+			  "mmc rescan; " \
+		"else " \
+			  "if mmc dev ${mmcdev}; then " \
+				  "gpt write mmc ${mmcdev} ${parts_flir}; " \
+				  "mmc rescan; " \
+			  "else; " \
+			  "fi; " \
+		"fi; \0"
+
+
+/* FLIR Recovery boot
+* 
+* Boot from preloaded recovery in ram
+* Loads kernel, devicetree and ram rootfs from ram
+* 
+* Boot from recovery partition in mmc
+* Loads kernel, devicetree and ram rootfs from recovery partition on emmc
+*/
+#define CONFIG_REC_BOOT_ENV \
+	"recargs=setenv bootargs console=${console},${baudrate} " \
+		"root=/dev/ram0 ethaddr=${ethaddr}\0" \
+	"loadinitrd=fatload mmc ${mmcdev}:${mmcpart} ${initrd_addr} ${initrd_file}\0" \
+	"initrd_addr=0x63800000\0" \
+	"initrd_file=uRamdisk.img\0" \
+\
+	"recboot=echo Booting preloaded recovery...; "\
+		"run recargs; " \
+		"bootz ${loadaddr} ${initrd_addr} ${fdt_addr}; \0" \
+\
+	"recoveryboot=echo Booting from mmc recovery;" \
+				 "run selectrecfdtfile; run recargs; " \
+				 "setenv bootargs_linux ${bootargs}; " \
+				 "setenv mmcpart 1; " \
+				 "run loadfdt; run loadinitrd; run loadimage; " \
+				 "bootz ${loadaddr} ${initrd_addr} ${fdt_addr};\0" 
+
+
+/* Select which emmc partition to boot from
+ * 
+* * Boot from emmc partition2 or partition3
+* based on system_active variable
+*/
+
+#define CONFIG_SELECT_BOOT_PARTITION_ENV \
+	"system_active=system1\0" \
+	"select_boot=" \
+		"if itest.s ${system_active} == system2; " \
+		"then " \
+			  "setenv mmcpart 3; setenv rootfs root=/dev/mmcblk0p3; " \
+		"else setenv mmcpart 2; setenv rootfs root=/dev/mmcblk0p2; " \
+		"fi; \0" 
+
+/* common mmc boot
+* Environment shared between flir mmc boot and legacy mmc boot
+*/
+#define CONFIG_MMC_BOOT_COMMON_ENV \
+	"mmcdev=0\0" \
+	"mmcpart=1\0" \
+	"mmcargs=setenv bootargs console=${console},${baudrate} " \
+		"${rootfs} rootwait rw ethaddr=${ethaddr} " \
+		"wlanaddr=${wlanaddr} btaddr=${btaddr} ${bootargs_once} " \
+		 "${extra_bootargs} \0" \
+\
+	"loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}\0" \
+	"loadimage4=ext4load mmc ${mmcdev}:${mmcpart} ${loadaddr} boot/${image}\0" \
+	"loadfdt4=ext4load mmc ${mmcdev}:${mmcpart} ${fdt_addr} " \
+		"boot/${fdt_file}\0" \
+	"loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr} ${fdt_file}\0" 
+
+/* FLIR mmc boot 
+*
+*loads kernel and boots from partition 2 or 3 on emmc
+*/
+#define CONFIG_MMC_BOOT_FLIR_ENV \
+	"hw_start=run startM4;\0" \
+	"setup_boot=bootargs_once=init=/sbin/preinit; " \
+			"run select_boot;\0" \
+\
+	"mmcbootflir=echo Booting from mmc (flir)...;" \
+			"run setup_boot;run update-fdt; run selectfdtfile; " \
+			"run hw_start;" \
+			"run mmcargs;" \
+			"if run loadimage4; then " \
+						"if run loadfdt4; then " \
+							  "bootz ${loadaddr} - ${fdt_addr}; " \
+						"else echo WARN: Cannot load the DT; " \
+						"fi; " \
+			 "else echo ERR: Cannot load the kernel; " \
+			 "fi;\0" 
+
+/* Legacy mmc boot 
+*
+* Uses partition layout as created by yocto rootfs.sdcard file
+*/
+#define CONFIG_MMC_BOOT_LEGACY_ENV \
+	"mmcroot_sdcard=/dev/mmcblk0p2  rootwait rw\0" \
+	"mmcargs_sdcard=setenv bootargs console=${console},${baudrate} " \
+		"root=${mmcroot_sdcard}\0" \
+\
+	"mmcboot_sdcard=echo Booting from mmc ...; " \
+		"if run loadimage; then " \
+			"run mmcargs_sdcard; " \
+			"if run loadfdt; then " \
+				"bootz ${loadaddr} - ${fdt_addr}; " \
+			"fi;" \
+		"fi;\0" \
+
+
+/* M4 boot
+*
+* Loads M4 code from emmc to sram
+* Starts executing M4
+*/
+
+#define CONFIG_M4_BOOT_ENV \
+	"m4_image=imx7ulpm4.bin\0" \
+	"m4_addr=0x1ffd2000\0" \
+	"loadM4=ext4load mmc ${mmcdev}:${mmcpart} ${m4_addr} boot/${m4_image}\0" \
+\
+	"startM4=echo Starting M4 ...; " \
+			"if run loadM4; then " \
+				"bootaux ${m4_addr};" \
+			"fi;\0"
+
+
+
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	CONFIG_DEFAULT_NETWORK_SETTINGS \
+	CONFIG_PARTITION_FLIR_ENV \
+	RANDOM_UUIDS \
+	"image=zImage\0" \
+	"console=ttyLP0\0" \
+	"tempaddr=0x66000000\0"\
+	"fdt_addr=0x63000000\0" \
+	"fdt_high=0xffffffff\0"	  \
+	"initrd_high=0xffffffff\0" \
+\
+	CONFIG_M4_BOOT_ENV \
+	CONFIG_MMC_BOOT_COMMON_ENV\
+	CONFIG_SELECT_FDT_FILE_ENV \
+	CONFIG_REC_BOOT_ENV \
+	CONFIG_SELECT_BOOT_PARTITION_ENV \
+	CONFIG_MMC_BOOT_FLIR_ENV\
+	CONFIG_MMC_BOOT_LEGACY_ENV \
+	""	/* end line */
+
+
+
+#define CONFIG_BOOTCOMMAND \
+	"if recoverykey && kbd_secret; then " \
+		 "run recoveryboot;" \
+	"else " \
+		"run mmcbootflir;" \
+	"fi;" \
+	"echo Fallback to recovery boot!....;" \
+	"run recoveryboot;"
+
+
+#endif	/* __MX7ULP_EC201_CONFIG_H */
-- 
2.17.1

