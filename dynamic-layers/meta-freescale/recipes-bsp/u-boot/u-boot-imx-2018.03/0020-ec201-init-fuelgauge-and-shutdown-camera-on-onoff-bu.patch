From 3e343f8d13bdc15c62f61efddfc1c4d8a87f5810 Mon Sep 17 00:00:00 2001
From: Felix Hammarstrand <felix.hammarstrand@flir.se>
Date: Thu, 14 Nov 2019 10:40:26 +0100
Subject: [PATCH] ec201: init fuelgauge and shutdown camera on onoff button
 long press

---
 board/flir/ec201/ec201.c | 61 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 61 insertions(+)

diff --git a/board/flir/ec201/ec201.c b/board/flir/ec201/ec201.c
index 2b98f71..594b402 100644
--- a/board/flir/ec201/ec201.c
+++ b/board/flir/ec201/ec201.c
@@ -20,10 +20,14 @@
 #include <mipi_dsi_panel.h>
 #include <splash.h>
 #include <mxsfb.h>
+#include <i2c.h>
+#include <bootstate.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
 #define UART_PAD_CTRL	(PAD_CTL_PUS_UP)
+#define SNVS_LPCR_BTN_PRESS_TIME_DISABLE	(0x3<<16)
+#define SNVS_LP_LPCR	(0x41070038)
 
 int dram_init(void)
 {
@@ -55,6 +59,54 @@ int board_ehci_usb_phy_mode(struct udevice *dev)
 }
 #endif
 
+#define CHANGE_OF_THE_PARAMETER_REG 0x12
+#define IC_POWER_MODE_REG 0x15
+#define STATUS_BIT_REG	0x16
+#define THERMISTOR_MODE 0x1
+#define OPERATIONAL_MODE 0x1
+
+int fuelgauge_init()
+{
+	struct udevice *dev;
+	u8 buf[4];
+	int ret;
+
+	ret = i2c_get_chip_for_busnum(5, 0xb, 1, &dev);
+	if (ret) {
+		printf("Can not find fuelgauge LC 709203: %d\n", ret);
+		return ret;
+	}
+
+	//Power on fuelgauge from standby
+	buf[0] = OPERATIONAL_MODE;
+	buf[1] = 0x0;
+	buf[2] = 0x64; //crc
+	dm_i2c_write(dev, IC_POWER_MODE_REG, buf, 3); //any write to the device will make it ready to do i2c communication
+	dm_i2c_write(dev, IC_POWER_MODE_REG, buf, 3); //second write will set it in operational mode
+
+	//Thermistor mode: fuelgague measures the attached resistor
+	buf[0] = THERMISTOR_MODE;
+	buf[1] = 0x0;
+	buf[2] = 0xd9;
+	dm_i2c_write(dev, STATUS_BIT_REG, buf, 3);
+
+	//Check if battery profile already is selected
+	//Every write to this register will recalibrate the fuelgauge, 
+	//which we only want to do once
+	ret = dm_i2c_read(dev, CHANGE_OF_THE_PARAMETER_REG, buf, 2);
+	if(ret==0 && *(u16*)buf == 0)
+	{
+		//Select battery profile 1
+		buf[0] = 0x01;
+		buf[1] = 0x0;
+		buf[2] = 0x72;
+		dm_i2c_write(dev, 0x12, buf, 3);
+	}
+	return 0;
+}
+
+
+
 int board_early_init_f(void)
 {
 	setup_iomux_uart();
@@ -72,6 +124,14 @@ int board_init(void)
 	setup_usb();
 #endif
 
+	fuelgauge_init();
+	boot_state_init();
+
+	//Let onoff button long press poweroff the camera
+	pmic_goto_core_off(true);
+	//onoff button longpress disabled for snvs block, this functionality is handled by pmic
+	writel((readl(SNVS_LP_LPCR) | SNVS_LPCR_BTN_PRESS_TIME_DISABLE), SNVS_LP_LPCR);
+
 	return 0;
 }
 
@@ -203,6 +263,7 @@ int splash_screen_prepare(void)
 				break;
 		}
 	}
+	set_boot_logo();
 	
 	return splash_source_load(splash_locations,
 				  ARRAY_SIZE(splash_locations));
-- 
2.7.4

