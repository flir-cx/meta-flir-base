From cdf2f467f994d892c9e40c86e3bac3a0a7327d70 Mon Sep 17 00:00:00 2001
From: Peter Fitger <peter.fitger@flir.se>
Date: Wed, 7 Nov 2018 12:55:41 +0100
Subject: [PATCH] Avoid system hangup on MU_SendMessage failure

Signed-off-by: David Sernelius <david.sernelius@flir.se>
---
 drivers/rpmsg/imx_rpmsg.c   | 11 +++++++----
 drivers/soc/imx/mu/mx8_mu.c | 34 +++++++++++++++++++++++++---------
 include/linux/mx8_mu.h      |  4 ++--
 3 files changed, 34 insertions(+), 15 deletions(-)

diff --git a/drivers/rpmsg/imx_rpmsg.c b/drivers/rpmsg/imx_rpmsg.c
index 4e557d59b438..965544043b03 100644
--- a/drivers/rpmsg/imx_rpmsg.c
+++ b/drivers/rpmsg/imx_rpmsg.c
@@ -146,6 +146,7 @@ static bool imx_rpmsg_notify(struct virtqueue *vq)
 {
 	unsigned int mu_rpmsg = 0;
 	struct imx_rpmsg_vq_info *rpvq = vq->priv;
+	bool ret = true;
 
 	mu_rpmsg = rpvq->vq_id << 16;
 	mutex_lock(&rpvq->rpdev->lock);
@@ -163,13 +164,15 @@ static bool imx_rpmsg_notify(struct virtqueue *vq)
 	 */
 	if (unlikely(rpvq->rpdev->first_notify > 0)) {
 		rpvq->rpdev->first_notify--;
-		MU_SendMessageTimeout(rpvq->rpdev->mu_base, 1, mu_rpmsg, 2000);
-	} else {
-		MU_SendMessage(rpvq->rpdev->mu_base, 1, mu_rpmsg);
+		if(MU_SendMessageTimeout(rpvq->rpdev->mu_base, 1, mu_rpmsg, 2000) < 0) {
+			ret = false;
+		}
+	} else if(MU_SendMessage(rpvq->rpdev->mu_base, 1, mu_rpmsg) < 0) {
+		ret = false;
 	}
 	mutex_unlock(&rpvq->rpdev->lock);
 
-	return true;
+	return ret;
 }
 
 static int imx_mu_rpmsg_callback(struct notifier_block *this,
diff --git a/drivers/soc/imx/mu/mx8_mu.c b/drivers/soc/imx/mu/mx8_mu.c
index 2cd6dc880bbe..99d12fcd5ca2 100644
--- a/drivers/soc/imx/mu/mx8_mu.c
+++ b/drivers/soc/imx/mu/mx8_mu.c
@@ -86,28 +86,42 @@ void MU_EnableGeneralInt(void __iomem *base, uint32_t index)
 /*
  * Wait and send message to the other core.
  */
-void MU_SendMessage(void __iomem *base, uint32_t regIndex, uint32_t msg)
+int32_t MU_SendMessage(void __iomem *base, uint32_t regIndex, uint32_t msg)
 {
 	uint32_t mask = MU_SR_TE0_MASK1 >> regIndex;
+	uint32_t tmo = 0x100000;	/* 100 - 200 ms timeout */
+#ifdef DEBUG_MU_TMO
+	static uint32_t worst_tmo = 0x100000;
+#endif
 
 	if (unlikely(version == MU_VER_ID_V10)) {
 		/* Wait TX register to be empty. */
-		while (!(readl_relaxed(base + MU_V10_ASR_OFFSET1) & mask))
+		while (--tmo && !(readl_relaxed(base + MU_V10_ASR_OFFSET1) & mask))
 			;
-		writel_relaxed(msg, base + MU_V10_ATR0_OFFSET1
-			       + (regIndex * 4));
+		if (tmo)
+			writel_relaxed(msg, base + MU_V10_ATR0_OFFSET1
+					+ (regIndex * 4));
 	} else {
 		/* Wait TX register to be empty. */
-		while (!(readl_relaxed(base + MU_ASR_OFFSET1) & mask))
+		while (--tmo && !(readl_relaxed(base + MU_ASR_OFFSET1) & mask))
 			;
-		writel_relaxed(msg, base + MU_ATR0_OFFSET1  + (regIndex * 4));
+		if (tmo)
+			writel_relaxed(msg, base + MU_ATR0_OFFSET1  + (regIndex * 4));
+	}
+#ifdef DEBUG_MU_TMO
+	if (tmo < worst_tmo) {
+		worst_tmo = tmo;
+		pr_info ("rpmsg worst tmo %d\n", worst_tmo);
 	}
+#endif
+
+	return (tmo == 0) ? -ETIMEDOUT : 0;
 }
 
 /*
  * Wait and send message to the other core with timeout mechanism.
  */
-void MU_SendMessageTimeout(void __iomem *base, uint32_t regIndex, uint32_t msg,
+int32_t MU_SendMessageTimeout(void __iomem *base, uint32_t regIndex, uint32_t msg,
 		uint32_t t)
 {
 	uint32_t mask = MU_SR_TE0_MASK1 >> regIndex;
@@ -118,7 +132,7 @@ void MU_SendMessageTimeout(void __iomem *base, uint32_t regIndex, uint32_t msg,
 		while (!(readl_relaxed(base + MU_V10_ASR_OFFSET1) & mask)) {
 			udelay(10);
 			if (timeout-- == 0)
-				return;
+	            return -ETIMEDOUT;
 		};
 
 		writel_relaxed(msg, base + MU_V10_ATR0_OFFSET1
@@ -128,11 +142,13 @@ void MU_SendMessageTimeout(void __iomem *base, uint32_t regIndex, uint32_t msg,
 		while (!(readl_relaxed(base + MU_ASR_OFFSET1) & mask)) {
 			udelay(10);
 			if (timeout-- == 0)
-				return;
+	            return -ETIMEDOUT;
 		};
 
 		writel_relaxed(msg, base + MU_ATR0_OFFSET1  + (regIndex * 4));
 	}
+
+    return 0;
 }
 
 /*
diff --git a/include/linux/mx8_mu.h b/include/linux/mx8_mu.h
index b31e52693db8..98aebdbcbc36 100644
--- a/include/linux/mx8_mu.h
+++ b/include/linux/mx8_mu.h
@@ -38,8 +38,8 @@
 
 
 void MU_Init(void __iomem *base);
-void MU_SendMessage(void __iomem *base, uint32_t regIndex, uint32_t msg);
-void MU_SendMessageTimeout(void __iomem *base, uint32_t regIndex, uint32_t msg, uint32_t t);
+int32_t MU_SendMessage(void __iomem *base, uint32_t regIndex, uint32_t msg);
+int32_t MU_SendMessageTimeout(void __iomem *base, uint32_t regIndex, uint32_t msg, uint32_t t);
 void MU_ReceiveMsg(void __iomem *base, uint32_t regIndex, uint32_t *msg);
 void MU_EnableGeneralInt(void __iomem *base, uint32_t index);
 void MU_EnableRxFullInt(void __iomem *base, uint32_t index);
-- 
2.17.1

