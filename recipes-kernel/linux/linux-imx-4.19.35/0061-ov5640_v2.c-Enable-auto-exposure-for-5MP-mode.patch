From 0feec922332db808c4f4ad871e2076b227d20f6e Mon Sep 17 00:00:00 2001
From: David Sernelius <david.sernelius@flir.se>
Date: Tue, 14 Jan 2020 07:22:29 +0100
Subject: [PATCH] ov5640_v2.c: Enable auto exposure for 5MP mode

---
 .../media/platform/mxc/capture/ov5640_v2.c    | 216 +++++++++++-------
 1 file changed, 129 insertions(+), 87 deletions(-)

diff --git a/drivers/media/platform/mxc/capture/ov5640_v2.c b/drivers/media/platform/mxc/capture/ov5640_v2.c
index 6dbfb57c334b..1f31c4e55d90 100644
--- a/drivers/media/platform/mxc/capture/ov5640_v2.c
+++ b/drivers/media/platform/mxc/capture/ov5640_v2.c
@@ -119,15 +119,18 @@ struct ov5640 {
 	void (*io_init)(void);
 };
 
+
 /*!
  * Maintains the information on the current state of the sesor.
  */
 static struct ov5640 ov5640_data;
 static int pwn_gpio, rst_gpio, clk_gpio;
+#if 0
 static int prev_sysclk;
 static int AE_Target = 52, night_mode;
 static int prev_HTS;
 static int AE_high, AE_low;
+#endif
 
 #if 0
 /* difference between 'ov5640_global_init_setting' and
@@ -921,21 +924,53 @@ static struct reg_value ov5640_setting_15fps_1080P_1920_1080[] = {
 };
 
 static struct reg_value ov5640_setting_15fps_QSXGA_2592_1944[] = {
-	{0x3c07, 0x07, 0, 0}, {0x3820, 0x40, 0, 0}, {0x3821, 0x06, 0, 0},
-	{0x3814, 0x11, 0, 0}, {0x3815, 0x11, 0, 0}, {0x3800, 0x00, 0, 0},
-	{0x3801, 0x00, 0, 0}, {0x3802, 0x00, 0, 0}, {0x3803, 0x00, 0, 0},
-	{0x3804, 0x0a, 0, 0}, {0x3805, 0x3f, 0, 0}, {0x3806, 0x07, 0, 0},
-	{0x3807, 0x9f, 0, 0}, {0x3808, 0x0a, 0, 0}, {0x3809, 0x20, 0, 0},
-	{0x380a, 0x07, 0, 0}, {0x380b, 0x98, 0, 0}, {0x380c, 0x0b, 0, 0},
-	{0x380d, 0x1c, 0, 0}, {0x380e, 0x07, 0, 0}, {0x380f, 0xb0, 0, 0},
-	{0x3813, 0x04, 0, 0}, {0x3618, 0x04, 0, 0}, {0x3612, 0x2b, 0, 0},
-	{0x3709, 0x12, 0, 0}, {0x370c, 0x00, 0, 0}, {0x3a02, 0x07, 0, 0},
-	{0x3a03, 0xae, 0, 0}, {0x3a14, 0x07, 0, 0}, {0x3a15, 0xae, 0, 0},
-	{0x4004, 0x06, 0, 0}, {0x3002, 0x1c, 0, 0}, {0x3006, 0xc3, 0, 0},
-	{0x4713, 0x02, 0, 0}, {0x4407, 0x0c, 0, 0}, {0x460b, 0x37, 0, 0},
-	{0x460c, 0x20, 0, 0}, {0x4837, 0x2c, 0, 0}, {0x3824, 0x01, 0, 0},
-	{0x5001, 0x83, 0, 0}, {0x3034, 0x1a, 0, 0}, {0x3035, 0x21, 0, 0},
-	{0x3036, 0x69, 0, 0}, {0x3037, 0x13, 0, 0},
+    {0x3c07, 0x07, 0x0, 0x0}, //50_60Hz
+    {0x3820, 0x40, 0x0, 0x0}, //V flip
+    {0x3821, 0x06, 0x0, 0x0}, //Mirror, jpeg disable
+    {0x3814, 0x11, 0x0, 0x0}, //X inc
+    {0x3815, 0x11, 0x0, 0x0}, //Y inc
+    {0x3800, 0x00, 0x0, 0x0}, //X addr start H
+    {0x3801, 0x00, 0x0, 0x0}, //X addr start L,0
+    {0x3802, 0x00, 0x0, 0x0}, //Y addr start H
+    {0x3803, 0x00, 0x0, 0x0}, //Y addr start L, 0
+    {0x3804, 0x0a, 0x0, 0x0}, //X addr end H
+    {0x3805, 0x3f, 0x0, 0x0}, //X addr end L, 2623
+    {0x3806, 0x07, 0x0, 0x0}, //Y addr end H
+    {0x3807, 0x9f, 0x0, 0x0}, //Y addr end L, 1951
+    {0x3808, 0x0a, 0x0, 0x0}, //DVP hor width H
+    {0x3809, 0x20, 0x0, 0x0}, //DVP hor width L, 2592
+    {0x380a, 0x07, 0x0, 0x0}, //DVP ver height H
+    {0x380b, 0x98, 0x0, 0x0}, //DVP ver height L, 1944
+    {0x380c, 0x0b, 0x0, 0x0}, //ISP total Hor size H
+    {0x380d, 0x1c, 0x0, 0x0}, //ISP total Hor size L, 2844
+    {0x380e, 0x07, 0x0, 0x0}, //ISP total Ver size H
+    {0x380f, 0xb0, 0x0, 0x0}, //ISP total Ver size L, 1968
+    {0x3810, 0x00, 0x0, 0x0}, //ISP hor offset H
+    {0x3811, 0x10, 0x0, 0x0}, //ISP hor offset L, 16 (191126 changen from 0)
+    {0x3812, 0x00, 0x0, 0x0}, //ISP Ver offset H
+    {0x3813, 0x04, 0x0, 0x0}, //ISP Ver offset L, 4 (191126 changen from 0)
+    {0x3618, 0x04, 0x0, 0x0}, //undoc
+    {0x3612, 0x2b, 0x0, 0x0}, //undoc
+    {0x3709, 0x12, 0x0, 0x0}, //undoc
+    {0x370c, 0x00, 0x0, 0x0}, //undoc
+    {0x3a02, 0x07, 0x0, 0x0}, //60Hz max expo H
+    {0x3a03, 0xae, 0x0, 0x0}, //60Hz max expo L
+    {0x3a14, 0x07, 0x0, 0x0}, //50Hz max expo H
+    {0x3a15, 0xae, 0x0, 0x0}, //50Hz max expo L
+    {0x4004, 0x06, 0x0, 0x0}, //BLC
+    {0x3002, 0x1c, 0x0, 0x0}, //Disable JFIFO, SFIFO and JPEG
+    {0x3006, 0xc3, 0x0, 0x0}, //JPG clock
+    {0x4713, 0x02, 0x0, 0x0}, //JPG mode 2
+    {0x4407, 0x0c, 0x0, 0x0}, //JPG ctrl
+    {0x460b, 0x37, 0x0, 0x0}, //Debug
+    {0x460c, 0x20, 0x0, 0x0}, //VFIFO
+    {0x4837, 0x2c, 0x0, 0x0}, //PCLK period
+    {0x3824, 0x01, 0x0, 0x0}, //DVP clock div
+    {0x5001, 0x83, 0x0, 0x0}, //ISP control
+    {0x3034, 0x1a, 0x0, 0x0}, //SC PLL
+    {0x3035, 0x21, 0x0, 0x0}, //SC PLL
+    {0x3036, 0x4d, 0x0, 0x0}, //SC PLL (191126 change from 69)
+    {0x3037, 0x13, 0x0, 0x0}, //SC PLL
 };
 
 static struct ov5640_mode_info ov5640_mode_info_data[2][ov5640_mode_MAX + 1] = {
@@ -1252,7 +1287,7 @@ static s32 ov5640_read_reg(u16 reg, u8 *val)
 static int ov5640_get_register(struct v4l2_subdev *sd,
 					struct v4l2_dbg_register *reg)
 {
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	/*struct i2c_client *client = v4l2_get_subdevdata(sd); */
 	int ret;
 	u8 val;
 
@@ -1271,7 +1306,7 @@ static int ov5640_get_register(struct v4l2_subdev *sd,
 static int ov5640_set_register(struct v4l2_subdev *sd,
 					const struct v4l2_dbg_register *reg)
 {
-	struct i2c_client *client = v4l2_get_subdevdata(sd);
+	/*struct i2c_client *client = v4l2_get_subdevdata(sd);*/
 
 	if (reg->reg & ~0xffff || reg->val & ~0xff)
 		return -EINVAL;
@@ -1319,6 +1354,8 @@ static int ov5640_driver_capability(int strength)
 	return 0;
 }
 #endif
+
+#if 0
 /* calculate sysclk */
 static int ov5640_get_sysclk(void)
 {
@@ -1395,6 +1432,7 @@ static int ov5640_get_VTS(void)
 	return VTS;
 }
 
+
 /* write VTS to registers */
 static int ov5640_set_VTS(int VTS)
 {
@@ -1408,6 +1446,8 @@ static int ov5640_set_VTS(int VTS)
 	return 0;
 }
 
+#endif
+
 /* read shutter, in number of line period */
 static int ov5640_get_shutter(void)
 {
@@ -1422,6 +1462,7 @@ static int ov5640_get_shutter(void)
 	return shutter;
 }
 
+#if 0
 /* write shutter, in number of line period */
 static int ov5640_set_shutter(int shutter)
 {
@@ -1441,6 +1482,7 @@ static int ov5640_set_shutter(int shutter)
 
 	return 0;
 }
+#endif
 
 /* read gain, 16 = 1x */
 static int ov5640_get_gain16(void)
@@ -1454,6 +1496,7 @@ static int ov5640_get_gain16(void)
 	return gain16;
 }
 
+#if 0
 /* write gain, 16 = 1x */
 static int ov5640_set_gain16(int gain16)
 {
@@ -1501,7 +1544,6 @@ static int ov5640_get_light_freq(void)
 	return light_frequency;
 }
 
-#if 0
 static void ov5640_set_bandingfilter(void)
 {
 	int prev_VTS;
@@ -1674,7 +1716,7 @@ static int ov5640_init_mode(void)
 	msleep(300);
 
 	/* turn off night mode */
-	night_mode = 0;
+	//night_mode = 0;
 	ov5640_data.pix.width = 720;
 	ov5640_data.pix.height = 480;
 err:
@@ -1715,7 +1757,7 @@ static int ov5640_change_mode_direct(enum ov5640_frame_rate frame_rate,
 	retval = ov5640_download_firmware(pModeSetting, ArySize);
 
 	/* turn on AE AG for subsampling mode, in case the firmware didn't */
-//	ov5640_turn_on_AE_AG(1);
+//    ov5640_turn_on_AE_AG(1);
 
 	/* calculate banding filter */
 //	ov5640_set_bandingfilter();
@@ -1751,10 +1793,10 @@ static int ov5640_change_mode_exposure_calc(enum ov5640_frame_rate frame_rate,
 			    enum ov5640_mode mode)
 {
 	int prev_shutter, prev_gain16, average;
-	int cap_shutter, cap_gain16;
-	int cap_sysclk, cap_HTS, cap_VTS;
-	int light_freq, cap_bandfilt, cap_maxband;
-	long cap_gain16_shutter;
+//	int cap_shutter, cap_gain16;
+//	int cap_sysclk, cap_HTS, cap_VTS;
+//	int light_freq, cap_bandfilt, cap_maxband;
+	//long cap_gain16_shutter;
 	u8 temp;
 	struct reg_value *pModeSetting = NULL;
 	s32 ArySize = 0;
@@ -1795,69 +1837,69 @@ static int ov5640_change_mode_exposure_calc(enum ov5640_frame_rate frame_rate,
 	if (retval < 0)
 		goto err;
 
-	/* turn off AE AG when capture image. */
-	ov5640_turn_on_AE_AG(0);
-
-	/* read capture VTS */
-	cap_VTS = ov5640_get_VTS();
-	cap_HTS = ov5640_get_HTS();
-	cap_sysclk = ov5640_get_sysclk();
-
-	/* calculate capture banding filter */
-	light_freq = ov5640_get_light_freq();
-	if (light_freq == 60) {
-		/* 60Hz */
-		cap_bandfilt = cap_sysclk * 100 / cap_HTS * 100 / 120;
-	} else {
-		/* 50Hz */
-		cap_bandfilt = cap_sysclk * 100 / cap_HTS;
-	}
-	cap_maxband = (int)((cap_VTS - 4)/cap_bandfilt);
-	/* calculate capture shutter/gain16 */
-	if (average > AE_low && average < AE_high) {
-		/* in stable range */
-		cap_gain16_shutter =
-			prev_gain16 * prev_shutter * cap_sysclk/prev_sysclk *
-			prev_HTS/cap_HTS * AE_Target / average;
-	} else {
-		cap_gain16_shutter =
-			prev_gain16 * prev_shutter * cap_sysclk/prev_sysclk *
-			prev_HTS/cap_HTS;
-	}
-
-	/* gain to shutter */
-	if (cap_gain16_shutter < (cap_bandfilt * 16)) {
-		/* shutter < 1/100 */
-		cap_shutter = cap_gain16_shutter/16;
-		if (cap_shutter < 1)
-			cap_shutter = 1;
-		cap_gain16 = cap_gain16_shutter/cap_shutter;
-		if (cap_gain16 < 16)
-			cap_gain16 = 16;
-	} else {
-		if (cap_gain16_shutter > (cap_bandfilt*cap_maxband*16)) {
-			/* exposure reach max */
-			cap_shutter = cap_bandfilt*cap_maxband;
-			cap_gain16 = cap_gain16_shutter / cap_shutter;
-		} else {
-			/* 1/100 < cap_shutter =< max, cap_shutter = n/100 */
-			cap_shutter =
-				((int)(cap_gain16_shutter/16/cap_bandfilt))
-				* cap_bandfilt;
-			cap_gain16 = cap_gain16_shutter / cap_shutter;
-		}
-	}
-
-	/* write capture gain */
-	ov5640_set_gain16(cap_gain16);
-
-	/* write capture shutter */
-	if (cap_shutter > (cap_VTS - 4)) {
-		cap_VTS = cap_shutter + 4;
-		ov5640_set_VTS(cap_VTS);
-	}
-
-	ov5640_set_shutter(cap_shutter);
+//	/* turn off AE AG when capture image. */
+//	ov5640_turn_on_AE_AG(0);
+	ov5640_turn_on_AE_AG(1);
+//	/* read capture VTS */
+//	cap_VTS = ov5640_get_VTS();
+//	cap_HTS = ov5640_get_HTS();
+//	cap_sysclk = ov5640_get_sysclk();
+//
+//	/* calculate capture banding filter */
+//	light_freq = ov5640_get_light_freq();
+//	if (light_freq == 60) {
+//		/* 60Hz */
+//		cap_bandfilt = cap_sysclk * 100 / cap_HTS * 100 / 120;
+//	} else {
+//		/* 50Hz */
+//		cap_bandfilt = cap_sysclk * 100 / cap_HTS;
+//	}
+//	cap_maxband = (int)((cap_VTS - 4)/cap_bandfilt);
+//	/* calculate capture shutter/gain16 */
+//	if (average > AE_low && average < AE_high) {
+//		/* in stable range */
+//		cap_gain16_shutter =
+//			prev_gain16 * prev_shutter * cap_sysclk/prev_sysclk *
+//			prev_HTS/cap_HTS * AE_Target / average;
+//	} else {
+//		cap_gain16_shutter =
+//			prev_gain16 * prev_shutter * cap_sysclk/prev_sysclk *
+//			prev_HTS/cap_HTS;
+//	}
+//
+//	/* gain to shutter */
+//	if (cap_gain16_shutter < (cap_bandfilt * 16)) {
+//		/* shutter < 1/100 */
+//		cap_shutter = cap_gain16_shutter/16;
+//		if (cap_shutter < 1)
+//			cap_shutter = 1;
+//		cap_gain16 = cap_gain16_shutter/cap_shutter;
+//		if (cap_gain16 < 16)
+//			cap_gain16 = 16;
+//	} else {
+//		if (cap_gain16_shutter > (cap_bandfilt*cap_maxband*16)) {
+//			/* exposure reach max */
+//			cap_shutter = cap_bandfilt*cap_maxband;
+//			cap_gain16 = cap_gain16_shutter / cap_shutter;
+//		} else {
+//			/* 1/100 < cap_shutter =< max, cap_shutter = n/100 */
+//			cap_shutter =
+//				((int)(cap_gain16_shutter/16/cap_bandfilt))
+//				* cap_bandfilt;
+//			cap_gain16 = cap_gain16_shutter / cap_shutter;
+//		}
+//	}
+//
+//	/* write capture gain */
+//	ov5640_set_gain16(cap_gain16);
+//
+//	/* write capture shutter */
+//	if (cap_shutter > (cap_VTS - 4)) {
+//		cap_VTS = cap_shutter + 4;
+//		ov5640_set_VTS(cap_VTS);
+//	}
+//
+//	ov5640_set_shutter(cap_shutter);
 
 	/* skip 2 vysnc: start capture at 3rd vsync
 	 * frame rate of QSXGA and 1080P is 7.5fps: 1/7.5 * 2
-- 
2.17.1

