From aebd8838ce3839a3fa4cec602980c405046518b4 Mon Sep 17 00:00:00 2001
From: Peter Fitger <peter.fitger@flir.se>
Date: Fri, 22 Feb 2019 16:08:25 +0100
Subject: [PATCH] Add possibility to control NIC priority

---
 arch/arm/common/Kconfig   |  3 ++
 arch/arm/common/Makefile  |  1 +
 arch/arm/common/nic_301.c | 75 +++++++++++++++++++++++++++++++++++++++++++++++
 arch/arm/mach-imx/Kconfig |  1 +
 4 files changed, 80 insertions(+)
 create mode 100644 arch/arm/common/nic_301.c

diff --git a/arch/arm/common/Kconfig b/arch/arm/common/Kconfig
index e5ad070..62f68ff 100644
--- a/arch/arm/common/Kconfig
+++ b/arch/arm/common/Kconfig
@@ -15,3 +15,6 @@ config SHARP_PARAM
 
 config SHARP_SCOOP
 	bool
+	
+config NIC_301
+	bool
diff --git a/arch/arm/common/Makefile b/arch/arm/common/Makefile
index 70b4a14..cbae370 100644
--- a/arch/arm/common/Makefile
+++ b/arch/arm/common/Makefile
@@ -17,3 +17,4 @@ AFLAGS_mcpm_head.o		:= -march=armv7-a
 AFLAGS_vlock.o			:= -march=armv7-a
 obj-$(CONFIG_BL_SWITCHER)	+= bL_switcher.o
 obj-$(CONFIG_BL_SWITCHER_DUMMY_IF) += bL_switcher_dummy_if.o
+obj-$(CONFIG_NIC_301)		+= nic_301.o
diff --git a/arch/arm/common/nic_301.c b/arch/arm/common/nic_301.c
new file mode 100644
index 0000000..6fdae6f
--- /dev/null
+++ b/arch/arm/common/nic_301.c
@@ -0,0 +1,75 @@
+/*
+ * linux/arch/arm/common/nic_301.c
+ *
+ * NIC-301 AXI switch settings
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/errno.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/of.h>
+
+static int nic_301_probe(struct platform_device *dev)
+{
+	struct resource *mem;
+	void __iomem *base;
+	int i;
+	int prio = 0;
+	char name[20];
+	int err;
+
+	mem = platform_get_resource(dev, IORESOURCE_MEM, 0);
+	if (!mem)
+		return -EINVAL;
+
+	base = devm_ioremap_resource(&dev->dev, mem);
+	if (IS_ERR(base))
+		return PTR_ERR(base);
+
+	for (i=0; i<7; i++) {
+		sprintf(name, "m%d_prio", i);
+
+		err = of_property_read_u32(dev->dev.of_node, name, &prio);
+
+		if (!err) {
+			writel(prio, ((uint32_t)base + 0x42000 + 0x1000 * i + 0x100));	// Read prio
+			writel(prio, ((uint32_t)base + 0x42000 + 0x1000 * i + 0x104));	// Write prio
+			dev_info(&dev->dev, "m%d has prio %d\n", i, prio);
+		}
+	}
+	devm_iounmap(&dev->dev, base);
+
+	return 0;
+}
+
+static int nic_301_remove(struct platform_device *dev)
+{
+	return 0;
+}
+
+static const struct of_device_id nic_301_of_match[] = {
+	{ .compatible = "arm,nic-301", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, nic_301_of_match);
+
+static struct platform_driver nic_301_device_driver = {
+	.probe		= nic_301_probe,
+	.remove		= nic_301_remove,
+	.driver		= {
+		.name	= "nic_301",
+		.of_match_table = of_match_ptr(nic_301_of_match),
+	},
+};
+
+module_platform_driver(nic_301_device_driver);
+
+MODULE_DESCRIPTION("NIC-301 priority configuration");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Peter Fitger <peter.fitger@flir.se>");
diff --git a/arch/arm/mach-imx/Kconfig b/arch/arm/mach-imx/Kconfig
index 7693cbd..18a9da9 100644
--- a/arch/arm/mach-imx/Kconfig
+++ b/arch/arm/mach-imx/Kconfig
@@ -623,6 +623,7 @@ config SOC_IMX7ULP
 	select SOC_IMX7
 	select CLKSRC_IMX_TPM
 	select PINCTRL_IMX7ULP
+	select NIC_301
 	help
 	  This enables support for Freescale i.MX7 Ultra Low Power processor.
 
-- 
1.9.1

