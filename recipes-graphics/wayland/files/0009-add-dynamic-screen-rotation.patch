From dbc9294a03ecd97d6dc571ca2ccb77a518933897 Mon Sep 17 00:00:00 2001
From: Erik Jansson <Erik.Jansson@teledyneflir.com>
Date: Thu, 15 Sep 2022 15:01:43 +0200
Subject: [PATCH] Add dynamic screen rotation

Added weston-rotator protocol, compositor support and a small
client.

Based on work by Emmanuel Gil Peyrot on wayland-devel list
in 2016.

%% original patch: 0009-add-dynamic-screen-rotation.patch
---
 clients/meson.build             |  11 +-
 clients/rotate.c                | 238 ++++++++++++++++++++++++++++++++
 compositor/meson.build          |   3 +
 compositor/rotator.c            | 134 ++++++++++++++++++
 desktop-shell/shell.c           |   2 +
 include/libweston/libweston.h   |   4 +
 libweston/backend-fbdev/fbdev.c |   2 +
 libweston/meson.build           |   2 +
 protocol/meson.build            |   1 +
 protocol/weston-rotator.xml     |  27 ++++
 10 files changed, 423 insertions(+), 1 deletion(-)
 create mode 100644 clients/rotate.c
 create mode 100644 compositor/rotator.c
 create mode 100644 protocol/weston-rotator.xml

diff --git a/clients/meson.build b/clients/meson.build
index 2c016b84..1505af70 100644
--- a/clients/meson.build
+++ b/clients/meson.build
@@ -218,10 +218,19 @@ tools_list = [
 		],
 		'deps': [ dep_toytoolkit, dep_matrix_c ],
 	},
+	{
+		'name': 'rotate',
+		'sources': [
+			'rotate.c',
+			weston_rotator_client_protocol_h,
+			weston_rotator_protocol_c,
+		],
+		'deps': [ dep_wayland_client, dep_libshared ]
+	},
 ]
 
 foreach t : tools_list
-	if tools_enabled.contains(t.get('name'))
+	if t.get('name') == 'rotate' or tools_enabled.contains(t.get('name'))
 		executable(
 			'weston-@0@'.format(t.get('name')),
 			t.get('sources'),
diff --git a/clients/rotate.c b/clients/rotate.c
new file mode 100644
index 00000000..c3994b3d
--- /dev/null
+++ b/clients/rotate.c
@@ -0,0 +1,238 @@
+/*
+ * Copyright © 2022 Teledyne FLIR, Inc.
+ * Copyright © 2016 Collabora, Ltd.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include "config.h"
+
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdbool.h>
+#include <assert.h>
+#include <unistd.h>
+#include <errno.h>
+#include <sys/mman.h>
+
+#include <wayland-client.h>
+#include "weston-rotator-client-protocol.h"
+#include "libweston/config-parser.h"
+#include "shared/helpers.h"
+#include "shared/os-compatibility.h"
+#include "shared/xalloc.h"
+
+static struct weston_rotator *rotator;
+static struct wl_list output_list;
+
+struct rotator_output {
+	struct wl_output *output;
+	struct wl_list link;
+};
+
+struct config {
+	struct wl_array allowed_rotations;
+};
+
+#define MAX_CAPTURE_BUFFER_LENGTH 16
+
+static const struct {
+	const char *name;
+	int token;
+} transforms[] = {
+	{ "normal",   WESTON_ROTATOR_TRANSFORM_NORMAL },
+	{ "90",       WESTON_ROTATOR_TRANSFORM_90 },
+	{ "180",      WESTON_ROTATOR_TRANSFORM_180 },
+	{ "270",      WESTON_ROTATOR_TRANSFORM_270 },
+};
+
+static bool
+parse_transform(const char *transform, int *out)
+{
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_LENGTH(transforms); i++)
+		if (strncmp(transforms[i].name, transform,
+			    strlen(transforms[i].name)) == 0) {
+			*out = transforms[i].token;
+			return true;
+		}
+
+	return false;
+}
+
+static struct config *
+read_configuration(void)
+{
+	struct config *configuration;
+	const char *config_file;
+	struct weston_config *config;
+	struct weston_config_section *s;
+
+	char *allowed_rotations, *p;
+	int transform, *array_items;
+	int i;
+
+	configuration = calloc(1, sizeof *configuration);
+	if (!configuration)
+		return NULL;
+
+	config_file = weston_config_get_name_from_env();
+	config = weston_config_parse(config_file);
+	s = weston_config_get_section(config, "rotator", NULL, NULL);
+	weston_config_section_get_string(s, "allowed_rotations",
+					 &allowed_rotations, NULL);
+	weston_config_destroy(config);
+
+	wl_array_init(&configuration->allowed_rotations);
+	if (allowed_rotations) {
+		p = allowed_rotations;
+		for (i = 0; i < 4; ++i) {
+			if (!parse_transform(p, &transform))
+				break;
+			array_items = wl_array_add(&configuration->allowed_rotations,
+						   sizeof(int));
+			*array_items = transform;
+			for (; *p != ' ' && *p != '\0'; p++);
+			if (*p++ == '\0')
+				break;
+		}
+		free(allowed_rotations);
+	} else {
+		array_items = wl_array_add(&configuration->allowed_rotations,
+					   sizeof(int));
+		array_items[0] = WESTON_ROTATOR_TRANSFORM_NORMAL;
+		array_items[1] = WESTON_ROTATOR_TRANSFORM_90;
+		array_items[2] = WESTON_ROTATOR_TRANSFORM_180;
+		array_items[3] = WESTON_ROTATOR_TRANSFORM_270;
+	}
+
+	return configuration;
+}
+
+static void
+destroy_configuration(struct config *config)
+{
+	wl_array_release(&config->allowed_rotations);
+	free(config);
+}
+
+static void
+handle_global(void *data, struct wl_registry *registry,
+	      uint32_t name, const char *interface, uint32_t version)
+{
+	static struct rotator_output *output;
+
+	if (strcmp(interface, "wl_output") == 0) {
+		output = xmalloc(sizeof *output);
+		output->output = wl_registry_bind(registry, name,
+						  &wl_output_interface, 1);
+		wl_list_insert(&output_list, &output->link);
+	} else if (strcmp(interface, "weston_rotator") == 0) {
+		rotator = wl_registry_bind(registry, name,
+					   &weston_rotator_interface,
+					   1);
+	}
+}
+
+static void
+handle_global_remove(void *data, struct wl_registry *registry, uint32_t name)
+{
+	/* XXX: unimplemented */
+}
+
+static const struct wl_registry_listener registry_listener = {
+	handle_global,
+	handle_global_remove
+};
+
+int main(int argc, char *argv[])
+{
+	struct wl_display *display;
+	struct wl_registry *registry;
+	struct rotator_output *output;
+	struct config *config;
+	int transform;
+	int n = 0;
+
+#if 0
+	if (getenv("WAYLAND_SOCKET") == NULL) {
+		fprintf(stderr, "%s must be launched by weston.\n",
+			program_invocation_short_name);
+		return -1;
+	}
+#endif
+
+	display = wl_display_connect(NULL);
+	if (display == NULL) {
+		fprintf(stderr, "failed to create display: %m\n");
+		return -1;
+	}
+
+	wl_list_init(&output_list);
+	registry = wl_display_get_registry(display);
+	wl_registry_add_listener(registry, &registry_listener, NULL);
+	wl_display_dispatch(display);
+	wl_display_roundtrip(display);
+	if (rotator == NULL) {
+		fprintf(stderr, "display doesn't support rotator\n");
+		free(registry);
+		wl_display_disconnect(display);
+		return -1;
+	}
+
+	config = read_configuration();
+	if (!config) {
+		fprintf(stderr, "failed to read configuration\n");
+		free(registry);
+		wl_display_disconnect(display);
+		return -1;
+	}
+
+	if (argc < 2) {
+		fprintf(stderr, "No transform provided\n");
+		return -1;
+	}
+
+	if (!parse_transform(argv[1], &transform)) {
+		fprintf(stderr, "Couldn't parse transform %s\n", argv[1]);
+		return -1;
+	}
+
+	fprintf(stdout, "Using transform %d\n", transform);
+
+	wl_list_for_each(output, &output_list, link) {
+		fprintf(stdout, "Rotating output %d\n", n);
+		n++;
+		weston_rotator_rotate(rotator,
+				      output->output,
+				      transform);
+	}
+
+	wl_display_roundtrip(display);
+
+	wl_display_disconnect(display);
+
+	destroy_configuration(config);
+
+	return 0;
+}
diff --git a/compositor/meson.build b/compositor/meson.build
index 9dc95f3f..7dad6353 100644
--- a/compositor/meson.build
+++ b/compositor/meson.build
@@ -4,12 +4,15 @@ srcs_weston = [
 	'testsuite-util.c',
 	'text-backend.c',
 	'weston-screenshooter.c',
+	'rotator.c',
 	text_input_unstable_v1_server_protocol_h,
 	text_input_unstable_v1_protocol_c,
 	input_method_unstable_v1_server_protocol_h,
 	input_method_unstable_v1_protocol_c,
 	weston_screenshooter_server_protocol_h,
 	weston_screenshooter_protocol_c,
+	weston_rotator_server_protocol_h,
+	weston_rotator_protocol_c,
 ]
 deps_weston = [
 	dep_libshared,
diff --git a/compositor/rotator.c b/compositor/rotator.c
new file mode 100644
index 00000000..8571616b
--- /dev/null
+++ b/compositor/rotator.c
@@ -0,0 +1,134 @@
+/*
+ * Copyright © 2022 Teledyne FLIR, Inc.
+ * Copyright © 2016 Collabora, Ltd.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial
+ * portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include "config.h"
+
+#include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <linux/input-event-codes.h>
+
+#include <libweston/libweston.h>
+#include <libweston/backend.h>
+#include "weston.h"
+#include "weston-rotator-server-protocol.h"
+#include "shared/helpers.h"
+#include <libweston/weston-log.h>
+
+struct rotator {
+	struct weston_compositor *ec;
+	struct wl_global *global;
+	struct wl_client *client;
+	struct weston_process process;
+	struct wl_listener destroy_listener;
+};
+
+static void
+rotator_rotate(struct wl_client *client,
+	       struct wl_resource *resource,
+	       struct wl_resource *output_resource,
+	       int32_t transform)
+{
+	int32_t current_width;
+
+	struct weston_output *output =
+		weston_head_from_resource(output_resource)->output;
+
+	/* Only swap width and height when the aspect ratio changed. */
+	if ((transform ^ output->transform) & 1) {
+		current_width = output->width;
+		output->width = output->height;
+		output->height = current_width;
+	}
+
+	output->transform = transform;
+	output->dirty = 1;
+	weston_output_damage(output);
+}
+
+struct weston_rotator_interface rotator_implementation = {
+       rotator_rotate
+};
+
+static void
+bind_rotator(struct wl_client *client,
+	     void *data, uint32_t version, uint32_t id)
+{
+	struct rotator *rotator = data;
+	struct wl_resource *resource;
+
+	resource = wl_resource_create(client,
+				     &weston_rotator_interface, 1, id);
+
+#if 0
+	if (client != rotator->client) {
+		wl_resource_post_error(resource,
+				       WL_DISPLAY_ERROR_INVALID_OBJECT,
+				       "rotator failed: permission denied");
+		return;
+	}
+#endif
+        wl_resource_set_implementation(resource, &rotator_implementation,
+				       data, NULL);
+}
+
+static void
+rotator_sigchld(struct weston_process *process, int status)
+{
+	struct rotator *rotator =
+		container_of(process, struct rotator, process);
+
+	rotator->client = NULL;
+}
+
+static void
+rotator_destroy(struct wl_listener *listener, void *data)
+{
+	struct rotator *rotator =
+		container_of(listener, struct rotator, destroy_listener);
+
+	wl_global_destroy(rotator->global);
+	free(rotator);
+}
+
+WL_EXPORT void
+rotator_create(struct weston_compositor *ec)
+{
+	struct rotator *rotator;
+
+	rotator = malloc(sizeof *rotator);
+	if (rotator == NULL)
+		return;
+
+	rotator->ec = ec;
+	rotator->client = NULL;
+
+	rotator->global = wl_global_create(ec->wl_display,
+					   &weston_rotator_interface, 1,
+					   rotator, bind_rotator);
+	rotator->destroy_listener.notify = rotator_destroy;
+	wl_signal_add(&ec->destroy_signal, &rotator->destroy_listener);
+}
diff --git a/desktop-shell/shell.c b/desktop-shell/shell.c
index 015509c2..13a20d9b 100644
--- a/desktop-shell/shell.c
+++ b/desktop-shell/shell.c
@@ -5471,6 +5471,8 @@ wet_shell_init(struct weston_compositor *ec,
 
 	screenshooter_create(ec);
 
+	rotator_create(ec);
+
 	shell_add_bindings(ec, shell);
 
 	shell_fade_init(shell);
diff --git a/include/libweston/libweston.h b/include/libweston/libweston.h
index 33acbf76..3b8bfe98 100644
--- a/include/libweston/libweston.h
+++ b/include/libweston/libweston.h
@@ -2080,6 +2080,10 @@ void
 weston_timeline_refresh_subscription_objects(struct weston_compositor *wc,
 					     void *object);
 
+void
+rotator_create(struct weston_compositor *ec);
+
+
 #ifdef  __cplusplus
 }
 #endif
diff --git a/libweston/backend-fbdev/fbdev.c b/libweston/backend-fbdev/fbdev.c
index c2b1a893..fe929627 100644
--- a/libweston/backend-fbdev/fbdev.c
+++ b/libweston/backend-fbdev/fbdev.c
@@ -808,6 +808,8 @@ fbdev_output_create(struct weston_compositor *compositor,
 
 	weston_compositor_add_pending_output(&output->base, compositor);
 
+	weston_log("Created fbdev output %p (%p).\n", output, &output->base);
+
 	return &output->base;
 }
 
diff --git a/libweston/meson.build b/libweston/meson.build
index 39517c8e..a7147253 100644
--- a/libweston/meson.build
+++ b/libweston/meson.build
@@ -67,6 +67,8 @@ srcs_libweston = [
 	weston_debug_server_protocol_h,
 	weston_direct_display_protocol_c,
 	weston_direct_display_server_protocol_h,
+	weston_rotator_protocol_c,
+	weston_rotator_server_protocol_h,
 ]
 
 if get_option('renderer-gl')
diff --git a/protocol/meson.build b/protocol/meson.build
index dc90ec2a..ca220dbd 100644
--- a/protocol/meson.build
+++ b/protocol/meson.build
@@ -39,6 +39,7 @@ generated_protocols = [
 	[ 'xdg-shell', 'stable' ],
 	[ 'alpha-compositing', 'v1' ],
 	[ 'hdr10-metadata', 'v1' ],
+	[ 'weston-rotator', 'internal' ],
 ]
 
 foreach proto: generated_protocols
diff --git a/protocol/weston-rotator.xml b/protocol/weston-rotator.xml
new file mode 100644
index 00000000..752cf17e
--- /dev/null
+++ b/protocol/weston-rotator.xml
@@ -0,0 +1,27 @@
+<protocol name="weston_rotator">
+
+  <interface name="weston_rotator" version="1">
+
+    <enum name="transform">
+      <description summary="copied from wl_output.transform"/>
+      <entry name="normal" value="0"/>
+      <entry name="90" value="1"/>
+      <entry name="180" value="2"/>
+      <entry name="270" value="3"/>
+      <entry name="flipped" value="4"/>
+      <entry name="flipped_90" value="5"/>
+      <entry name="flipped_180" value="6"/>
+      <entry name="flipped_270" value="7"/>
+    </enum>
+
+    <request name="rotate">
+      <arg name="output" type="object" interface="wl_output"/>
+      <arg name="transform" type="int" enum="transform"/>
+    </request>
+
+    <event name="done"/>
+
+  </interface>
+
+</protocol>
+
-- 
2.25.1

